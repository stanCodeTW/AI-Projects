{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"sGXHmwVjLXdf"},"outputs":[],"source":["from google.colab import drive\n","import torch\n","import pandas as pd\n","import os\n","from sklearn.preprocessing import StandardScaler\n","from torch.utils.data import Dataset, DataLoader\n","import torch.nn as nn\n","import torch.nn.functional as F\n","import random\n","import torch.optim as optim\n","import matplotlib.pyplot as plt\n","import numpy as np\n","from IPython.display import clear_output\n","from datetime import datetime, timedelta\n","from tqdm import tqdm\n","from pandas.tseries.offsets import BDay\n","import matplotlib.dates as mdates"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":18956,"status":"ok","timestamp":1727433453950,"user":{"displayName":"sc201jun24c","userId":"02069774851930120564"},"user_tz":-480},"id":"ls3_eKx-LaYb","outputId":"5967e4e2-4be7-43c2-f93a-0a70bee0b39e"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n","/content/drive/MyDrive/Colab Notebooks/Poster\n"]}],"source":["# Mount to Google Drive\n","drive.mount('/content/drive', force_remount=True)\n","\n","# Define Project Folder\n","FOLDERNAME = 'Colab\\ Notebooks/Poster'\n","\n","%cd drive/MyDrive/$FOLDERNAME"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6,"status":"ok","timestamp":1727433453950,"user":{"displayName":"sc201jun24c","userId":"02069774851930120564"},"user_tz":-480},"id":"Nb9ebkzpLbrO","outputId":"52f0da48-f6cf-4854-e5ce-efeabc4cbb0a"},"outputs":[{"output_type":"stream","name":"stdout","text":["Device: cpu\n"]}],"source":["# Define device\n","if torch.cuda.is_available():\n","  device = torch.device('cuda')\n","else:\n","  device = torch.device('cpu')\n","print('Device:', device)"]},{"cell_type":"markdown","source":["## 1. Data Processing\n","- **Overview**: Classes and functions for processing time series data.\n","- **Key Components**:\n","  - `TimeSeriesDataset`: Class for loading and processing time series data.\n","  - Data normalization and transformation techniques."],"metadata":{"id":"j2gHCC7WXZey"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"4GQ3XJBoLd4j"},"outputs":[],"source":["CSV_FILE = 'raw_data/1_data.csv'\n","SEQUENCE_LENGTH = 60\n","BATCH_SIZE = 1\n","TRAIN_PERCENT = 0.8\n","FUTURE_STEP = 30"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"IAzsqSuwLfYc"},"outputs":[],"source":["# Data Processing Classes\n","class TimeSeriesDataset(Dataset):\n","    def __init__(self, data, sequence_length):\n","        \"\"\"\n","        Initializes the TimeSeriesDataset.\n","\n","        :Arg data: numpy.ndarray, shape [num_samples, num_features].\n","                    Time series data for training or validation.\n","        :Arg sequence_length: int, Length of input sequences.\n","        \"\"\"\n","        self.data = data  # Time series data\n","        self.sequence_length = sequence_length\n","\n","    def __len__(self):\n","        # Returns the total number of sequences that can be generated\n","        return len(self.data) - self.sequence_length + 1\n","\n","    def __getitem__(self, idx):\n","        \"\"\"\n","        Retrieves a sequence of data given an index.\n","\n","        :Arg idx: int, Index to retrieve the sequence.\n","        :Return seq: torch.Tensor, shape [sequence_length, num_features].\n","                     The input sequence of length `sequence_length`.\n","        \"\"\"\n","        seq = self.data[idx:idx + self.sequence_length]  # Extract sequence\n","        return seq\n","\n","    def get_future_y(self, idx, future_steps):\n","        \"\"\"\n","        Retrieves future values from the dataset.\n","\n","        :Arg idx: int, Index to start retrieving future values.\n","        :Arg future_steps: int, Number of future steps to retrieve.\n","        :Return y_seq: numpy.ndarray or None, Future values of shape [future_steps].\n","                       Returns None if not enough future data is available.\n","        \"\"\"\n","        if idx + self.sequence_length + future_steps <= len(self.data):\n","            return self.data[idx + self.sequence_length:idx + self.sequence_length + future_steps, 0]  # NVIDIA prices in dimension 0\n","        else:\n","            return None  # Not enough future data\n","\n","class DataProcessor:\n","    def __init__(self, csv_file, sequence_length, batch_size, shuffle=True, num_workers=4):\n","        \"\"\"\n","        Initializes the DataProcessor.\n","\n","        :Arg csv_file: str, Path to the CSV file containing the time series data.\n","        :Arg sequence_length: int, Length of input sequences.\n","        :Arg batch_size: int, Size of batches for DataLoader.\n","        :Arg shuffle: bool, Whether to shuffle the data.\n","        :Arg num_workers: int, Number of subprocesses to use for data loading.\n","        \"\"\"\n","        self.csv_file = csv_file\n","        self.sequence_length = sequence_length\n","        self.batch_size = batch_size\n","        self.shuffle = shuffle\n","        self.num_workers = num_workers\n","\n","        # Load and preprocess data\n","        self.data = self.load_and_check_csv()\n","        self.scaled_data = self.preprocess_data()\n","        self.dataset = self.create_dataset()\n","        self.train_loader, self.val_loader = self.create_dataloaders()\n","\n","    def load_and_check_csv(self):\n","        \"\"\"\n","        Loads the CSV file and checks its validity.\n","\n","        :Return data: pandas.DataFrame, Loaded and checked data.\n","        :Raise FileNotFoundError: If the CSV file does not exist.\n","        :Raise ValueError: If the 'DATE' column is missing.\n","        \"\"\"\n","        # Check CSV file availability\n","        if not os.path.isfile(self.csv_file):\n","            raise FileNotFoundError(f\"CSV file '{self.csv_file}' not found.\")\n","\n","        # Read CSV file and check column names\n","        data = pd.read_csv(self.csv_file)\n","\n","        # Check if 'DATE' column exists\n","        if 'DATE' not in data.columns:\n","            raise ValueError(\"CSV file must contain a 'DATE' column.\")\n","\n","        # Remove 'DATE' column\n","        data = data.drop(columns=['DATE'])\n","\n","        print(\"CSV file check passed.\")\n","        return data\n","\n","    def preprocess_data(self):\n","        \"\"\"\n","        Preprocesses the data by standardizing it and converting it to PyTorch tensor format.\n","\n","        :Return scaled_data: torch.Tensor, shape [num_samples, num_features].\n","                             Preprocessed and scaled data.\n","        \"\"\"\n","        display(self.data.head(5))  # Display first 5 rows of data\n","        scaler = StandardScaler()\n","        nvdia_return = self.data['NVDA_LR']\n","        self.data = self.data.drop(columns=['NVDA_LR'])\n","\n","        # Standardize the data\n","        scaled_data = scaler.fit_transform(self.data)\n","        new_data = pd.DataFrame()\n","        new_data['NVDA_LR'] = nvdia_return\n","        new_data = pd.concat([new_data, pd.DataFrame(scaled_data)], axis=1)\n","        self.data = new_data\n","\n","        print(\"Data scaled!\")\n","        display(self.data.head(5))  # Display first 5 rows of scaled data\n","        self.data = self.data.to_numpy()  # Convert to numpy\n","        return torch.tensor(new_data.to_numpy(), dtype=torch.float32)  # Convert to PyTorch tensor\n","\n","    def create_dataset(self):\n","        \"\"\"\n","        Creates a TimeSeriesDataset instance.\n","\n","        :Return dataset: TimeSeriesDataset, Dataset containing the time series data.\n","        \"\"\"\n","        return TimeSeriesDataset(self.data, self.sequence_length)\n","\n","    def create_dataloaders(self):\n","        \"\"\"\n","        Creates DataLoader instances for training and validation datasets.\n","\n","        :Return train_loader: DataLoader, DataLoader for the training dataset.\n","        :Return val_loader: DataLoader, DataLoader for the validation dataset.\n","        \"\"\"\n","        # Split the dataset into training and validation sets\n","        split_index = int(TRAIN_PERCENT * len(self.dataset))\n","        train_dataset = torch.utils.data.Subset(self.dataset, range(split_index))\n","        val_dataset = torch.utils.data.Subset(self.dataset, range(split_index, len(self.dataset)))\n","\n","        # Create DataLoader instances\n","        train_loader = DataLoader(train_dataset, batch_size=self.batch_size, shuffle=self.shuffle, num_workers=self.num_workers)\n","        val_loader = DataLoader(val_dataset, batch_size=self.batch_size, shuffle=False, num_workers=self.num_workers)\n","        return train_loader, val_loader\n","\n","    def get_y_for_batch(self, batch_indices, future_steps):\n","        \"\"\"\n","        Retrieves future y values for a given batch of indices.\n","\n","        :Arg batch_indices: list of int, Indices for which to retrieve y values.\n","        :Arg future_steps: int, Number of future steps to retrieve.\n","        :Return future_y: torch.Tensor, shape [num_valid_samples, future_steps].\n","                           Stacked tensor of future y values.\n","        \"\"\"\n","        future_y_list = []\n","        for idx in batch_indices:\n","            y_seq = self.dataset.get_future_y(idx, future_steps=future_steps)\n","            if y_seq is not None:\n","                # Convert numpy array to torch tensor\n","                future_y_list.append(torch.tensor(y_seq, dtype=torch.float32))\n","\n","        # Return stacked tensor of future y values\n","        return torch.stack(future_y_list)  # Return stacked tensor\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":487},"executionInfo":{"elapsed":1427,"status":"ok","timestamp":1727417528299,"user":{"displayName":"sc201jun24c","userId":"02069774851930120564"},"user_tz":-480},"id":"fD41P_nOLhRs","outputId":"689538a7-26b6-4f41-c19d-ce7ba4ca05bf","collapsed":true},"outputs":[{"output_type":"stream","name":"stdout","text":["CSV file check passed.\n"]},{"output_type":"display_data","data":{"text/plain":["    NVDA_LR  UMCSENT_YOY  VIXCLS  PAYEMS_YOY  NASDAQ100_LR   GOLD_LR  \\\n","0 -0.010039     0.100271  0.1423    0.016915      0.006121  0.018868   \n","1 -0.012052     0.100271  0.1376    0.016915     -0.006995  0.010878   \n","2  0.013313     0.100271  0.1355    0.016915     -0.003332 -0.000485   \n","3  0.016240     0.100271  0.1292    0.016915      0.008720 -0.006808   \n","4  0.013537     0.100271  0.1287    0.016915      0.002720 -0.003340   \n","\n","   GDPC1_YOY  DTWEXBGS_LR  DCOILWTICO_LR  CORESTICKM159SFRBATL  ICSA_YOY  \\\n","0   0.016508     0.000759      -0.007409              1.821944 -0.082873   \n","1   0.016508     0.000360      -0.015678              1.821944 -0.082873   \n","2   0.016508     0.000617      -0.005782              1.821944 -0.112948   \n","3   0.016508     0.001372       0.002038              1.821944 -0.112948   \n","4   0.016508     0.001894      -0.015226              1.821944 -0.112948   \n","\n","   CCSA_YOY  CBBTCUSD_LR  \n","0 -0.102335     0.048751  \n","1 -0.102335     0.021071  \n","2 -0.077534     0.131417  \n","3 -0.077534    -0.136643  \n","4 -0.077534     0.050466  "],"text/html":["\n","  <div id=\"df-ca88c145-c452-456c-9334-da2f8c88cef5\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>NVDA_LR</th>\n","      <th>UMCSENT_YOY</th>\n","      <th>VIXCLS</th>\n","      <th>PAYEMS_YOY</th>\n","      <th>NASDAQ100_LR</th>\n","      <th>GOLD_LR</th>\n","      <th>GDPC1_YOY</th>\n","      <th>DTWEXBGS_LR</th>\n","      <th>DCOILWTICO_LR</th>\n","      <th>CORESTICKM159SFRBATL</th>\n","      <th>ICSA_YOY</th>\n","      <th>CCSA_YOY</th>\n","      <th>CBBTCUSD_LR</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>-0.010039</td>\n","      <td>0.100271</td>\n","      <td>0.1423</td>\n","      <td>0.016915</td>\n","      <td>0.006121</td>\n","      <td>0.018868</td>\n","      <td>0.016508</td>\n","      <td>0.000759</td>\n","      <td>-0.007409</td>\n","      <td>1.821944</td>\n","      <td>-0.082873</td>\n","      <td>-0.102335</td>\n","      <td>0.048751</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>-0.012052</td>\n","      <td>0.100271</td>\n","      <td>0.1376</td>\n","      <td>0.016915</td>\n","      <td>-0.006995</td>\n","      <td>0.010878</td>\n","      <td>0.016508</td>\n","      <td>0.000360</td>\n","      <td>-0.015678</td>\n","      <td>1.821944</td>\n","      <td>-0.082873</td>\n","      <td>-0.102335</td>\n","      <td>0.021071</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.013313</td>\n","      <td>0.100271</td>\n","      <td>0.1355</td>\n","      <td>0.016915</td>\n","      <td>-0.003332</td>\n","      <td>-0.000485</td>\n","      <td>0.016508</td>\n","      <td>0.000617</td>\n","      <td>-0.005782</td>\n","      <td>1.821944</td>\n","      <td>-0.112948</td>\n","      <td>-0.077534</td>\n","      <td>0.131417</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.016240</td>\n","      <td>0.100271</td>\n","      <td>0.1292</td>\n","      <td>0.016915</td>\n","      <td>0.008720</td>\n","      <td>-0.006808</td>\n","      <td>0.016508</td>\n","      <td>0.001372</td>\n","      <td>0.002038</td>\n","      <td>1.821944</td>\n","      <td>-0.112948</td>\n","      <td>-0.077534</td>\n","      <td>-0.136643</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.013537</td>\n","      <td>0.100271</td>\n","      <td>0.1287</td>\n","      <td>0.016915</td>\n","      <td>0.002720</td>\n","      <td>-0.003340</td>\n","      <td>0.016508</td>\n","      <td>0.001894</td>\n","      <td>-0.015226</td>\n","      <td>1.821944</td>\n","      <td>-0.112948</td>\n","      <td>-0.077534</td>\n","      <td>0.050466</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ca88c145-c452-456c-9334-da2f8c88cef5')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-ca88c145-c452-456c-9334-da2f8c88cef5 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-ca88c145-c452-456c-9334-da2f8c88cef5');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-f886101f-2bce-474e-8a92-bd4fdc9b0b8b\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f886101f-2bce-474e-8a92-bd4fdc9b0b8b')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-f886101f-2bce-474e-8a92-bd4fdc9b0b8b button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"val_loader = data_processor\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"NVDA_LR\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.013982809768496179,\n        \"min\": -0.0120520165274183,\n        \"max\": 0.0162402798128258,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          -0.0120520165274183,\n          0.0135371332050266,\n          0.0133130844341836\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"UMCSENT_YOY\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.5515838457795457e-17,\n        \"min\": 0.1002710027100271,\n        \"max\": 0.1002710027100271,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.1002710027100271\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"VIXCLS\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.005767408430135699,\n        \"min\": 0.1286999999999999,\n        \"max\": 0.1423,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.1376\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PAYEMS_YOY\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 0.0169151948426398,\n        \"max\": 0.0169151948426398,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.0169151948426398\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NASDAQ100_LR\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.006528159917166024,\n        \"min\": -0.0069949456608409,\n        \"max\": 0.0087201197323967,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          -0.0069949456608409\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GOLD_LR\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.010712116563498755,\n        \"min\": -0.006808261020156,\n        \"max\": 0.0188677069777574,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.0108776135453396\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GDPC1_YOY\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 0.0165081755593802,\n        \"max\": 0.0165081755593802,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.0165081755593802\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DTWEXBGS_LR\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0006228875243164708,\n        \"min\": 0.0003602025272302,\n        \"max\": 0.0018942105835897,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.0003602025272302\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DCOILWTICO_LR\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.007354664459874455,\n        \"min\": -0.0156782872487397,\n        \"max\": 0.0020382992628027,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          -0.0156782872487397\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CORESTICKM159SFRBATL\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.482534153247273e-16,\n        \"min\": 1.821944,\n        \"max\": 1.821944,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.821944\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ICSA_YOY\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.01647260815533856,\n        \"min\": -0.1129476584022038,\n        \"max\": -0.0828729281767955,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          -0.1129476584022038\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CCSA_YOY\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.013583709156791149,\n        \"min\": -0.1023345059162136,\n        \"max\": -0.0775341595170003,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          -0.0775341595170003\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CBBTCUSD_LR\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.09831254067689282,\n        \"min\": -0.1366432798286316,\n        \"max\": 0.131416961355872,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.0210711865062664\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Scaled !\n"]},{"output_type":"display_data","data":{"text/plain":["    NVDA_LR         0         1         2         3         4         5  \\\n","0 -0.010039  0.736969 -0.511630  0.078398  0.408648  2.007720 -0.302156   \n","1 -0.012052  0.736969 -0.577419  0.078398 -0.571421  1.145094 -0.302156   \n","2  0.013313  0.736969 -0.606814  0.078398 -0.297686 -0.081586 -0.302156   \n","3  0.016240  0.736969 -0.695000  0.078398  0.602850 -0.764307 -0.302156   \n","4  0.013537  0.736969 -0.701999  0.078398  0.154494 -0.389866 -0.302156   \n","\n","          6         7         8         9        10        11  \n","0  0.230580 -0.264858 -0.886995 -0.192139 -0.245022  1.121219  \n","1  0.102051 -0.537946 -0.886995 -0.192139 -0.245022  0.463779  \n","2  0.184691 -0.211151 -0.886995 -0.203587 -0.232884  3.084638  \n","3  0.427880  0.047103 -0.886995 -0.203587 -0.232884 -3.282149  \n","4  0.596226 -0.523019 -0.886995 -0.203587 -0.232884  1.161935  "],"text/html":["\n","  <div id=\"df-c6d795db-06cc-464c-9c65-6454447906d6\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>NVDA_LR</th>\n","      <th>0</th>\n","      <th>1</th>\n","      <th>2</th>\n","      <th>3</th>\n","      <th>4</th>\n","      <th>5</th>\n","      <th>6</th>\n","      <th>7</th>\n","      <th>8</th>\n","      <th>9</th>\n","      <th>10</th>\n","      <th>11</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>-0.010039</td>\n","      <td>0.736969</td>\n","      <td>-0.511630</td>\n","      <td>0.078398</td>\n","      <td>0.408648</td>\n","      <td>2.007720</td>\n","      <td>-0.302156</td>\n","      <td>0.230580</td>\n","      <td>-0.264858</td>\n","      <td>-0.886995</td>\n","      <td>-0.192139</td>\n","      <td>-0.245022</td>\n","      <td>1.121219</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>-0.012052</td>\n","      <td>0.736969</td>\n","      <td>-0.577419</td>\n","      <td>0.078398</td>\n","      <td>-0.571421</td>\n","      <td>1.145094</td>\n","      <td>-0.302156</td>\n","      <td>0.102051</td>\n","      <td>-0.537946</td>\n","      <td>-0.886995</td>\n","      <td>-0.192139</td>\n","      <td>-0.245022</td>\n","      <td>0.463779</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.013313</td>\n","      <td>0.736969</td>\n","      <td>-0.606814</td>\n","      <td>0.078398</td>\n","      <td>-0.297686</td>\n","      <td>-0.081586</td>\n","      <td>-0.302156</td>\n","      <td>0.184691</td>\n","      <td>-0.211151</td>\n","      <td>-0.886995</td>\n","      <td>-0.203587</td>\n","      <td>-0.232884</td>\n","      <td>3.084638</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.016240</td>\n","      <td>0.736969</td>\n","      <td>-0.695000</td>\n","      <td>0.078398</td>\n","      <td>0.602850</td>\n","      <td>-0.764307</td>\n","      <td>-0.302156</td>\n","      <td>0.427880</td>\n","      <td>0.047103</td>\n","      <td>-0.886995</td>\n","      <td>-0.203587</td>\n","      <td>-0.232884</td>\n","      <td>-3.282149</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.013537</td>\n","      <td>0.736969</td>\n","      <td>-0.701999</td>\n","      <td>0.078398</td>\n","      <td>0.154494</td>\n","      <td>-0.389866</td>\n","      <td>-0.302156</td>\n","      <td>0.596226</td>\n","      <td>-0.523019</td>\n","      <td>-0.886995</td>\n","      <td>-0.203587</td>\n","      <td>-0.232884</td>\n","      <td>1.161935</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c6d795db-06cc-464c-9c65-6454447906d6')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-c6d795db-06cc-464c-9c65-6454447906d6 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-c6d795db-06cc-464c-9c65-6454447906d6');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-08ef5ddb-194a-47a1-b206-1c20292407af\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-08ef5ddb-194a-47a1-b206-1c20292407af')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-08ef5ddb-194a-47a1-b206-1c20292407af button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"val_loader = data_processor\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"NVDA_LR\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.013982809768496179,\n        \"min\": -0.0120520165274183,\n        \"max\": 0.0162402798128258,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          -0.0120520165274183,\n          0.0135371332050266,\n          0.0133130844341836\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 0,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 0.7369694363110075,\n        \"max\": 0.7369694363110075,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.7369694363110075\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 1,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.08073050674429144,\n        \"min\": -0.7019987076049787,\n        \"max\": -0.5116298608304943,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          -0.5774190946422643\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 2,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 0.07839846276566442,\n        \"max\": 0.07839846276566442,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.07839846276566442\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 3,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4878016076512741,\n        \"min\": -0.5714214255389182,\n        \"max\": 0.6028503846550426,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          -0.5714214255389182\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 4,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.1565007767043334,\n        \"min\": -0.7643073089759354,\n        \"max\": 2.0077197462005265,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1.1450938397556414\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 5,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": -0.30215563685728475,\n        \"max\": -0.30215563685728475,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          -0.30215563685728475\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 6,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.20066075953214577,\n        \"min\": 0.10205100769317402,\n        \"max\": 0.5962256535175718,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.10205100769317402\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 7,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.24287096790085239,\n        \"min\": -0.5379462679684406,\n        \"max\": 0.04710346984528683,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          -0.5379462679684406\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 8,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": -0.8869946663148717,\n        \"max\": -0.8869946663148717,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          -0.8869946663148717\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 9,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.006270619769842354,\n        \"min\": -0.203587347037858,\n        \"max\": -0.1921388140462563,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          -0.203587347037858\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 10,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.006648392298652701,\n        \"min\": -0.24502245514120058,\n        \"max\": -0.2328842070308149,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          -0.2328842070308149\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 11,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.335053313787745,\n        \"min\": -3.2821489350337316,\n        \"max\": 3.084637541676006,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.4637789467194766\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/torch/utils/data/dataloader.py:557: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(_create_warning_msg(\n"]}],"source":["# Initialize DataProcessor\n","data_processor = DataProcessor(csv_file=CSV_FILE, sequence_length=SEQUENCE_LENGTH, batch_size=BATCH_SIZE)\n","train_loader = data_processor.train_loader\n","val_loader = data_processor.val_loader"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2919,"status":"ok","timestamp":1727417531214,"user":{"displayName":"sc201jun24c","userId":"02069774851930120564"},"user_tz":-480},"id":"YGwDyWrdLhkU","outputId":"49c4b04b-9f1c-4a00-aacc-7d118315626e"},"outputs":[{"output_type":"stream","name":"stdout","text":["Batch shape: torch.Size([1, 60, 13])\n"]}],"source":["# Check size\n","for batch in train_loader:\n","    print(\"Batch shape:\", batch.shape)\n","    break  # Check 1 batch"]},{"cell_type":"markdown","metadata":{"id":"74F3S054L_ca"},"source":["## 2. Load Trained Models\n","- **Overview**: Steps to load the pre-trained Seq2Seq and GAN Generator models.\n","- **Key Components**:\n","  - Define the model architectures.\n","  - Load model weights using `torch.load`.\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RBzgXfRPN3Wa"},"outputs":[],"source":["# Encoder Model Class\n","class Encoder(nn.Module):\n","    def __init__(self, input_size, embedding_size, hidden_size, n_layers, dropout):\n","        super().__init__()\n","        self.hidden_size = hidden_size\n","        self.n_layers = n_layers\n","\n","        # Linear layer for embedding input features into a higher dimensional space\n","        self.linear = nn.Linear(input_size, embedding_size)\n","\n","        # LSTM layer for processing the embedded input sequence\n","        self.rnn = nn.LSTM(embedding_size, hidden_size, n_layers, dropout=dropout, batch_first=True)\n","\n","        # Dropout layer for regularization\n","        self.dropout = nn.Dropout(dropout)\n","\n","    def forward(self, x):\n","        \"\"\"\n","        :Arg x: torch.Tensor, shape [batch_size, seq_len, input_size].\n","\n","        :Return hidden: torch.Tensor, shape [n_layers, batch_size, hidden_size].\n","                        The hidden state of the last time step from the LSTM.\n","        :Return cell: torch.Tensor, shape [n_layers, batch_size, hidden_size].\n","                      The cell state of the last time step from the LSTM.\n","        \"\"\"\n","        # Embed the input: [batch_size, seq_len, embedding_size]\n","        embedded = self.dropout(F.relu(self.linear(x)))\n","\n","        # RNN output processing\n","        # hidden: [n_layers, batch_size, hidden_size]\n","        # cell: [n_layers, batch_size, hidden_size]\n","        output, (hidden, cell) = self.rnn(embedded)\n","\n","        return hidden, cell"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"QJAU0knFN3-O"},"outputs":[],"source":["# Decoder Model Class\n","class Decoder(nn.Module):\n","    def __init__(self, output_size, embedding_size, hidden_size, n_layers, dropout):\n","        super().__init__()\n","        self.output_size = output_size\n","        self.hidden_size = hidden_size\n","        self.n_layers = n_layers\n","\n","        # Linear layer for embedding input to a higher dimensional space\n","        self.embedding = nn.Linear(output_size, embedding_size)\n","\n","        # LSTM layer for sequential processing\n","        self.rnn = nn.LSTM(embedding_size, hidden_size, n_layers, dropout=dropout, batch_first=True)\n","\n","        # Linear layer for mapping LSTM outputs to the output size\n","        self.linear = nn.Linear(hidden_size, output_size)\n","\n","        # Dropout layer for regularization\n","        self.dropout = nn.Dropout(dropout)\n","\n","    def forward(self, x, hidden, cell):\n","        \"\"\"\n","        :Arg x: torch.Tensor, shape [batch_size, feature_size].\n","        :Arg hidden: torch.Tensor, shape [n_layers, batch_size, hidden_size].\n","                     The hidden state from the encoder.\n","        :Arg cell: torch.Tensor, shape [n_layers, batch_size, hidden_size].\n","                    The cell state from the encoder.\n","\n","        :Return prediction: torch.Tensor, shape [batch_size, output_size].\n","                            The predicted output from the decoder.\n","        :Return hidden: torch.Tensor, updated hidden state of shape [n_layers, batch_size, hidden_size].\n","        :Return cell: torch.Tensor, updated cell state of shape [n_layers, batch_size, hidden_size].\n","        \"\"\"\n","        # Add a sequence dimension to x for LSTM input: [batch_size, 1, feature_size]\n","        x = x.unsqueeze(1)\n","\n","        # Compute embedded representation: [batch_size, 1, embedding_size]\n","        embedded = self.dropout(F.relu(self.embedding(x)))\n","\n","        # RNN output processing\n","        # output: [batch_size, 1, hidden_size]\n","        # hidden: [n_layers, batch_size, hidden_size]\n","        # cell: [n_layers, batch_size, hidden_size]\n","        output, (hidden, cell) = self.rnn(embedded, (hidden, cell))\n","\n","        # Generate prediction: [batch_size, output_size]\n","        prediction = self.linear(output.squeeze(1))  # output.squeeze(1) changes shape to [batch_size, hidden_size]\n","\n","        return prediction, hidden, cell\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Nf1_EIyQL-w_"},"outputs":[],"source":["# Seq2Seq Model Class\n","class Seq2Seq(nn.Module):\n","    def __init__(self, encoder, decoder, device):\n","        super().__init__()\n","        self.encoder = encoder\n","        self.decoder = decoder\n","        self.device = device\n","\n","        # Ensure encoder and decoder have matching hidden sizes and number of layers\n","        assert encoder.hidden_size == decoder.hidden_size, \\\n","            \"Hidden dimensions of encoder and decoder must be equal!\"\n","        assert encoder.n_layers == decoder.n_layers, \\\n","            \"Encoder and decoder must have equal number of layers!\"\n","\n","    def forward(self, x, teacher_forcing_ratio=0.5):\n","        \"\"\"\n","        :Arg x: torch.Tensor, shape [batch_size, seq_len, feature_size]\n","        :Arg teacher_forcing_ratio: float, Probability of using teacher forcing during training.\n","\n","        :Return outputs: torch.Tensor, shape [batch_size, seq_len, output_size]\n","        \"\"\"\n","        batch_size = x.shape[0]\n","        target_len = x.shape[1]  # Use the same length for target sequence\n","\n","        # Tensor to store decoder outputs\n","        outputs = torch.zeros(batch_size, target_len, self.decoder.output_size).to(self.device)\n","\n","        # Encode the input sequence\n","        hidden, cell = self.encoder(x)\n","\n","        # First input to the decoder is the last coordinate of x\n","        decoder_input = x[:, 0, :]  # Shape: [batch_size, feature_size]\n","\n","        # Decode each time step\n","        for t in range(target_len):\n","            # Run decoder for one time step\n","            output, hidden, cell = self.decoder(decoder_input, hidden, cell)\n","\n","            # Store predictions for each time step\n","            outputs[:, t, :] = output\n","\n","            # Decide whether to use teacher forcing\n","            teacher_forcing = random.random() < teacher_forcing_ratio\n","\n","            # Use true label or prediction as the next input\n","            decoder_input = x[:, t, :] if teacher_forcing else output\n","\n","        return outputs"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"sQCjSuUQMBwf"},"outputs":[],"source":["class CNNGenerator(nn.Module):\n","    def __init__(self, input_dim, cond_dim, dnn_hidden_dim, output_dim):\n","        super(CNNGenerator, self).__init__()\n","        self.generator_cnn = nn.Sequential(\n","            nn.Conv1d(in_channels = 1, out_channels = 6, kernel_size = 3, stride = 1, padding = 1),\n","            nn.BatchNorm1d(num_features = 6),\n","            nn.ReLU(),\n","            nn.Conv1d(in_channels = 6, out_channels = 12, kernel_size = 3, stride = 1, padding = 1),\n","            nn.BatchNorm1d(num_features = 12),\n","            nn.ReLU(),\n","            nn.Conv1d(in_channels = 12, out_channels = 12, kernel_size = 3, stride = 1, padding = 1),\n","            nn.BatchNorm1d(num_features = 12),\n","            nn.ReLU(),\n","            nn.Flatten()\n","        )\n","        self.linear1 = nn.Linear(in_features = 12 * (input_dim + cond_dim), out_features = 128)\n","        self.linear2 = nn.Linear(in_features = 128, out_features = output_dim)\n","\n","    def forward(self, noise, cond):\n","        \"\"\"\n","        :Arg noise: torch.Tensor, shape [batch_size, input_dim].\n","        :Arg cond: torch.Tensor, shape [batch_size, cond_dim].\n","\n","        :Return: torch.Tensor, shape [batch_size, output_dim].\n","        The generated data from the generator.\n","        \"\"\"\n","        # Concatenate noise with conditional input\n","        x = torch.cat((noise, cond), dim=1)  # Shape: (batch_size, input_dim + cond_dim)\n","        x = x.unsqueeze(1)\n","\n","        # Pass through the generator\n","        generated_data = self.generator_cnn(x)\n","        generated_data = nn.functional.relu(self.linear1(generated_data))\n","        generated_data = self.linear2(generated_data)\n","\n","        # generated_data = self.generator(x)  # Shape: (batch_size, output_dim)\n","        return generated_data"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vwCeTDZtOq8P"},"outputs":[],"source":["# Set Seq2Seq model parameters\n","INPUT_SIZE = 13\n","EMBEDDING_SIZE = 16\n","HIDDEN_SIZE = 32\n","N_LAYERS = 1\n","DROPOUT = 0.5\n","OUTPUT_SIZE = 13"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1186,"status":"ok","timestamp":1727351572393,"user":{"displayName":"sc201jun24c","userId":"02069774851930120564"},"user_tz":-480},"id":"ONbZODLyMRc-","outputId":"d48f7ac5-eed0-45f1-9c76-838ab6631161"},"outputs":[{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/torch/nn/modules/rnn.py:88: UserWarning: dropout option adds dropout after all but last recurrent layer, so non-zero dropout expects num_layers greater than 1, but got dropout=0.5 and num_layers=1\n","  warnings.warn(\"dropout option adds dropout after all but last \"\n","<ipython-input-13-1d51ec07c733>:15: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n","  seq2seq_model.load_state_dict(torch.load(seq2seq_path))\n"]},{"data":{"text/plain":["<All keys matched successfully>"]},"execution_count":13,"metadata":{},"output_type":"execute_result"}],"source":["# Load models\n","seq2seq_path = 'Seq2Seq_model_state/Seq2Seq_model_20240925_164817/Seq2Seq_model_epoch_250.pth'\n","\n","# Initialize Encoder & Decoder\n","encoder = Encoder(\n","    input_size=INPUT_SIZE,\n","    embedding_size=EMBEDDING_SIZE,\n","    hidden_size=HIDDEN_SIZE,\n","    n_layers=N_LAYERS,\n","    dropout=DROPOUT\n",").to(device)\n","\n","decoder = Decoder(\n","    output_size=OUTPUT_SIZE,\n","    embedding_size=EMBEDDING_SIZE,\n","    hidden_size=HIDDEN_SIZE,\n","    n_layers=N_LAYERS,\n","    dropout=DROPOUT\n",").to(device)\n","\n","# Create Seq2Seq model\n","seq2seq_model = Seq2Seq(encoder, decoder, device).to(device)\n","\n","# Load model weights\n","seq2seq_model.load_state_dict(torch.load(seq2seq_path))\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"lCwneao-MlC-"},"outputs":[],"source":["# Set WGAN model parameters\n","G_INPUT_DIM = 32\n","G_COND_DIM = 32\n","HIDDEN_DIM = 128\n","OUTPUT_DIM = 30  # Feature 30-day log return (matches C_INPUT_DIM)\n","LATENT_DIM = 32"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1599,"status":"ok","timestamp":1727351573988,"user":{"displayName":"sc201jun24c","userId":"02069774851930120564"},"user_tz":-480},"id":"oIsw88EVPQSW","outputId":"299c99ac-99ed-4512-89c2-6c5bfc826bf6"},"outputs":[{"name":"stderr","output_type":"stream","text":["<ipython-input-15-c7acf5dd68e6>:3: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n","  dnn_generator_model.load_state_dict(torch.load(dnn_generator_path))\n"]},{"data":{"text/plain":["<All keys matched successfully>"]},"execution_count":15,"metadata":{},"output_type":"execute_result"}],"source":["# Load models\n","cnn_generator_path = 'GAN_model_state/GAN_model_20240925_185152/generator_epoch_1200.pth'\n","\n","# Load DNN Generator model\n","dnn_generator_model = CNNGenerator(\n","    input_dim=LATENT_DIM,\n","    cond_dim=G_COND_DIM,\n","    dnn_hidden_dim=HIDDEN_DIM,\n","    output_dim=OUTPUT_DIM\n",").to(device)\n","\n","# Load model weights\n","dnn_generator_model.load_state_dict(torch.load(cnn_generator_path))"]},{"cell_type":"markdown","metadata":{"id":"LY0aJKS0V4gn"},"source":["## 3. Generate Predictions\n","- **Overview**: Use the loaded models to generate predictions.\n","- **Key Components**:\n","  - Inference using the Seq2Seq model to obtain conditional inputs.\n","  - Generate 10,000 prediction data using the GAN Generator based on the Seq2Seq outputs for subsequent strategy analysis.\n"]},{"cell_type":"code","source":["START_DATE = '2022-08-01'\n","END_DATE = '2024-08-30'"],"metadata":{"id":"BUKQZtr7YseV","executionInfo":{"status":"ok","timestamp":1727456676462,"user_tz":-480,"elapsed":382,"user":{"displayName":"sc201jun24c","userId":"02069774851930120564"}}},"execution_count":207,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"WcstZWELDPSE"},"outputs":[],"source":["# ---- Check date length ---- #\n","# Define date range\n","dates = pd.date_range(start=START_DATE, end=END_DATE)\n","weekdays = dates[dates.dayofweek < 5]  # Keep only weekdays (0-4)\n","\n","# Assume val_loader is a list or other object with a computable length\n","val_loader_length = len(val_loader)\n","\n","# Check if the number of weekdays matches the number of samples in val_loader\n","if len(weekdays) == val_loader_length:\n","    print(len(weekdays))\n","    print(\"Sample count matches; both lengths are the same.\")\n","else:\n","    print(\"Sample count does not match.\")\n","\n","# Check the range of weekdays\n","print(\"Weekday range:\", weekdays.min(), \"to\", weekdays.max())\n"]},{"cell_type":"code","execution_count":208,"metadata":{"id":"ImSBkBQRs9Jr","executionInfo":{"status":"ok","timestamp":1727456682139,"user_tz":-480,"elapsed":328,"user":{"displayName":"sc201jun24c","userId":"02069774851930120564"}}},"outputs":[],"source":["NUMS = 10000"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ZC7hHtgH2jXh"},"outputs":[],"source":["# ---- Generate 10,000 prediction data ----- #\n","\n","seq2seq_model.eval()\n","dnn_generator_model.eval()\n","\n","# upper = []\n","# lower = []\n","\n","# Create a folder and name it with the current timestamp\n","timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n","folder_path = f\"simulated_data_{timestamp}/\"\n","os.makedirs(folder_path, exist_ok=True)  # Create folder\n","\n","# Define date range\n","dates = pd.date_range(start=START_DATE, end=END_DATE)\n","weekdays = dates[dates.dayofweek < 5]  # Keep only weekdays (0-4)\n","\n","# Trim weekdays to match the length of val_loader\n","weekdays = weekdays[:len(val_loader)]\n","\n","# Use tqdm to wrap the loop and track progress\n","for i, (x, date) in tqdm(enumerate(zip(val_loader, weekdays)), total=len(val_loader)):\n","    inputs = x.to(device).float()\n","\n","    # Generate conditional inputs using the encoder\n","    cond, _ = seq2seq_model.encoder(inputs)\n","    cond = cond.squeeze(0)\n","\n","    simulated_data = []\n","\n","    # Generate multiple simulated data samples\n","    for _ in range(NUMS):\n","        noise = torch.randn(cond.size(0), cond.size(1)).to(device)  # Generate noise\n","        generated_returns = dnn_generator_model(noise, cond)  # Generate returns\n","        generated_returns = generated_returns.sum(dim=1).detach().cpu().numpy()[0]\n","\n","        simulated_data.append(generated_returns)\n","\n","    # Store generated data in a DataFrame\n","    log_returns_df = pd.DataFrame(simulated_data)  # Create a new DataFrame for each batch\n","\n","    # Save to CSV file\n","    csv_filename = f\"{folder_path}simulated_log_returns_batch_{i + 1}.csv\"\n","    log_returns_df.to_csv(csv_filename, index=False)\n","    print(f\"Batch {i + 1} data saved to {csv_filename}\")\n","\n","# Indicate completion\n","print(\"Data generation complete!\")"]},{"cell_type":"code","source":["# ---- Combine Files ---- #\n","\n","# Folder path where the CSV files are stored\n","folder_path = f\"simulated_data_20240926_150150/\"\n","\n","# Initialize an empty DataFrame to summarize, with columns 0-9999\n","combined_df = pd.DataFrame(columns=range(NUMS))\n","\n","# Read CSV files from the folder\n","for i, csv_file in enumerate(sorted(os.listdir(folder_path))):\n","\n","    if csv_file.endswith(\".csv\"):\n","        # Read the CSV file, setting header to None\n","        batch_df = pd.read_csv(os.path.join(folder_path, csv_file), header=None)\n","\n","        # Check if the number of rows is 10001\n","        if batch_df.shape[0] == NUMS+1:\n","            # Remove the first row, which is all zeros\n","            data = batch_df.iloc[1:].values.flatten()  # Remove the first row\n","\n","            # Check if the length of the data matches NUMS\n","            if len(data) == NUMS:\n","                # Add the corresponding date as the index of the DataFrame for this batch\n","                date = weekdays[i]\n","                combined_df.loc[date] = data\n","            else:\n","                print(f\"Warning: {csv_file} has {len(data)} elements after removing the first row, expected {NUMS} elements.\")\n","        else:\n","            print(f\"Warning: {csv_file} has {batch_df.shape[0]} rows, expected 10001 rows.\")\n","\n","# Save the final combined results as a CSV file\n","combined_csv_filename = f\"Strategy_datas/simulated_log_returns_combined_with_dates.csv\"\n","combined_df.to_csv(combined_csv_filename, index=True)\n","print(f\"Combined data with dates saved to {combined_csv_filename}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"l-EpLChZUQSk","executionInfo":{"status":"ok","timestamp":1727372047973,"user_tz":-480,"elapsed":18216,"user":{"displayName":"sc201jun24c","userId":"02069774851930120564"}},"outputId":"38460824-d8ec-4f48-c30b-ad6ed26200cb"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Combined data with dates saved to /content/drive/MyDrive/simulated_log_returns_combined_with_dates.csv\n"]}]},{"cell_type":"code","execution_count":209,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":696,"status":"ok","timestamp":1727456692252,"user":{"displayName":"sc201jun24c","userId":"02069774851930120564"},"user_tz":-480},"id":"aLrr733jsVnf","outputId":"c3fc195d-07a3-4e5d-eb27-9c212c8bb77b"},"outputs":[{"output_type":"stream","name":"stdout","text":["           DATE  NVDA_Price\n","2238 2022-08-01   18.419060\n","2239 2022-08-02   18.503958\n","2240 2022-08-03   18.870522\n","2241 2022-08-04   19.192138\n","2242 2022-08-05   18.966407\n","...         ...         ...\n","2778 2024-08-26  126.449413\n","2779 2024-08-27  128.289261\n","2780 2024-08-28  125.599492\n","2781 2024-08-29  117.580152\n","2782 2024-08-30  119.359993\n","\n","[545 rows x 2 columns]\n"]}],"source":["# ---- Read Real NVIDIA Stock Prices ----#\n","\n","# Read the real price data\n","CSV_FILE = 'raw_data/NVDA.csv'  # Replace with your CSV file path\n","df_csv = pd.read_csv(CSV_FILE)\n","\n","# Convert the date column to datetime format\n","df_csv['DATE'] = pd.to_datetime(df_csv['DATE'], errors='coerce')  # Ensure correct date format\n","\n","# Select a specific date range\n","filtered_df = df_csv[df_csv['DATE'].between('2022-08-01', '2024-08-30')].copy()\n","\n","# Remove weekends (Saturday and Sunday)\n","filtered_df = filtered_df[~filtered_df['DATE'].dt.dayofweek.isin([5, 6])]\n","\n","# Select the two columns you need: date and price\n","real_nvda = filtered_df[['DATE', df_csv.columns[1]]]  # df_csv.columns[1] is the price column\n","\n","# Display the results\n","print(real_nvda)\n"]},{"cell_type":"code","source":["# ---- Convert Predicted Log Returns to Future Prices (Predictions Combined into a List) ----#\n","\n","# Assume combined_df and real_nvda have already been defined\n","df = combined_df  # Here we assume combined_df is a DataFrame containing dates and log returns\n","\n","# Create an empty list to store results\n","price_predictions_list = []\n","\n","# Create a set to store existing dates\n","existing_dates = set()\n","\n","# Iterate over each date to perform calculations\n","for index, row in df.iterrows():\n","    # Get the current date\n","    current_date = index  # The first column is the date\n","\n","    # Check if the current date is within the range of real_nvda dates\n","    if current_date not in real_nvda['DATE'].values:\n","        print(f\"Skipping date: {current_date} as it is not in the range of real_nvda\")\n","        continue  # If not in the range, skip this iteration\n","\n","    # Get the actual price\n","    current_price = real_nvda.loc[real_nvda['DATE'] == current_date, 'NVDA_Price'].values[0]\n","    print(f\"Current price: {current_price}, Date: {current_date}\")\n","\n","    # Get log returns data (from the second column onwards, retrieve all log returns)\n","    log_returns = row[:].to_numpy()  # Convert to NumPy array\n","\n","    # Calculate future prices\n","    future_prices = current_price * np.exp(log_returns)  # Calculate prices using log returns\n","\n","    # Calculate the future date (30 days later)\n","    future_date = current_date + pd.DateOffset(days=30)\n","\n","    # Get the range of business days for the next 30 days\n","    workdays = pd.bdate_range(start=current_date, periods=30)\n","\n","    # Check if future_date is a business day, and adjust to the next business day if not\n","    if future_date not in workdays:\n","        # If it's not a business day, find the next business day\n","        future_date = workdays[workdays > future_date][0]\n","\n","    # Ensure future date is not duplicated\n","    while future_date in existing_dates:\n","        future_date += pd.DateOffset(days=1)  # Adjust to the next day\n","        if future_date not in workdays:  # If not a business day, keep adjusting\n","            future_date = workdays[workdays > future_date][0]\n","\n","    # Try to get the actual price for the future date\n","    if future_date in real_nvda['DATE'].values:\n","        actual_price = real_nvda.loc[real_nvda['DATE'] == future_date, 'NVDA_Price'].values[0]\n","    else:\n","        print(f\"No price data found for {future_date}.\")\n","        actual_price = None  # Or set to another appropriate default value\n","\n","    # Add the current future date to the existing dates set\n","    existing_dates.add(future_date)\n","\n","    # Append results to the list\n","    price_predictions_list.append({\n","        'DATE': future_date,\n","        'actual_price': actual_price,\n","        'predicted_price': future_prices  # Prices calculated using all log returns\n","    })\n","\n","# Convert the list to a DataFrame\n","price_predictions = pd.DataFrame(price_predictions_list)\n","\n","# Remove rows with NaN values\n","price_predictions = price_predictions.dropna()\n","\n","# Display the results\n","print(price_predictions)\n","\n","# If the DataFrame is still empty, display some debug information\n","if price_predictions.empty:\n","    print(\"The price predictions DataFrame is empty.\")\n","    print(\"Existing dates:\", existing_dates)\n"],"metadata":{"id":"5kf17CFzcAmM"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# ---- Read Predicted Data (Log Returns) ----#\n","\n","# Assume you have already read the data into a DataFrame\n","combined_df = pd.read_csv('Strategy_datas/simulated_log_returns_combined_with_dates.csv', header=0, index_col=0)  # Set the first column as the index\n","\n","# Display the first few rows of the DataFrame\n","print(combined_df.head())\n","\n","# Confirm the type of the index\n","print(combined_df.index)\n"],"metadata":{"id":"JopypG_oZiUY"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"iWKjcPNTiTfk"},"outputs":[],"source":["# ---- Query Price on Specific Date ----#\n","\n","# real_nvda is the DataFrame created previously\n","# Query the price on 2022/08/31\n","specific_date = pd.to_datetime('2022-09-26')  # Convert the date to datetime format\n","price_on_specific_date = real_nvda[real_nvda['DATE'] == specific_date]\n","\n","# Check if there is a corresponding price\n","if not price_on_specific_date.empty:\n","    print(price_on_specific_date)\n","else:\n","    print(\"No price data found for the specified date.\")\n",""]},{"cell_type":"code","source":["# ---- Expand Predicted Prices ----#\n","\n","# Convert each list in the 'predicted_price' column into multiple columns\n","predicted_prices_df = price_predictions.copy()['predicted_price'].apply(pd.Series)\n","\n","# Rename the new columns, using 'predicted_price_0', 'predicted_price_1', ..., 'predicted_price_9999'\n","predicted_prices_df.columns = [f'predicted_price_{i}' for i in range(predicted_prices_df.shape[1])]\n","\n","# Merge the new predicted prices DataFrame with the original DataFrame\n","price_predictions_expanded = pd.concat([price_predictions.copy().drop(columns=['predicted_price']), predicted_prices_df], axis=1)\n","\n","# Display the result\n","print(price_predictions_expanded)\n","\n","# Specify the path to save the file\n","csv_file_path = 'Strategy_datas/expanded_price_predictions.csv'\n","\n","# Save the results to a CSV file\n","price_predictions_expanded.to_csv(csv_file_path, index=False)\n","\n","print(f\"Data saved to {csv_file_path}\")\n"],"metadata":{"id":"Xdt5lJohdU4S"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# ---- Read Forecasted Price Data ----#\n","\n","# Read the data into a DataFrame\n","price_predictions_expanded = pd.read_csv('Strategy_datas/expanded_price_predictions.csv', header=0, index_col=0)  # index_col=0 makes the first column as the index\n","\n","# Display the first few rows of the DataFrame\n","print(price_predictions_expanded.head())\n","\n","# Confirm the type of the index\n","print(price_predictions_expanded.index)\n"],"metadata":{"id":"N9Lm1wa4QRTi"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# ---- Find Maximum and Minimum Prices ----#\n","\n","# Assuming df is your DataFrame\n","df = price_predictions.copy()\n","\n","# Function to filter prices by removing the top and bottom 10%\n","def filter_prices(prices):\n","    sorted_prices = sorted(prices)\n","    n = len(sorted_prices)\n","    lower_bound_index = int(n * 0.1)  # 10% lower bound index\n","    upper_bound_index = int(n * 0.9)  # 90% upper bound index\n","    filtered_prices = sorted_prices[lower_bound_index:upper_bound_index]  # Remove top and bottom 10%\n","    return max(filtered_prices), min(filtered_prices)  # Return max and min\n","\n","# Extract maximum and minimum prices\n","df['max_predicted_price'], df['min_predicted_price'] = zip(*df['predicted_price'].apply(filter_prices))\n","\n","# Keep the first two columns and the new columns\n","bands_df = df[['DATE', 'actual_price', 'min_predicted_price', 'max_predicted_price']]\n","\n","# Display the result\n","print(bands_df)\n","\n","# Specify the path to save the file\n","csv_file_path = 'Strategy_datas/bands_price.csv'\n","\n","# Save the result as a CSV file\n","bands_df.to_csv(csv_file_path, index=False)\n","\n","print(f\"Data saved to {csv_file_path}\")\n"],"metadata":{"id":"sBG7tZUDgl9p"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# ---- Read Maximum and Minimum Values (Bounds) ----#\n","\n","# Assuming you have already read the data into a DataFrame\n","bands_df = pd.read_csv('Strategy_datas/bands_price.csv', header=0, index_col=0)  # index_col=0 makes the first column the index\n","\n","# View the first few rows of the DataFrame\n","print(bands_df.head())\n","\n","# Confirm the type of the index\n","print(bands_df.index)\n"],"metadata":{"id":"h3sOmKyNQ11b"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":407},"executionInfo":{"elapsed":1054,"status":"ok","timestamp":1727447341647,"user":{"displayName":"sc201jun24c","userId":"02069774851930120564"},"user_tz":-480},"id":"Nabhe8Mtkn7l","outputId":"556a2968-d923-4636-e449-db3a8a3f5ff0"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x400 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAABKUAAAGGCAYAAACqvTJ0AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAEAAElEQVR4nOzdd1hUZ/bA8e/MMPTeQaqIYkMFe+8aNZtidrOJSUzPJlHTNpuy+9uUTW+b7mYTN2aTmM2asmkm0aigWLAg2JAmIFWQ3gam3N8f7NwV6QhiOZ/n4Yncufe9585cJszhvOfVKIqiIIQQQgghhBBCCCHEOaTt7wCEEEIIIYQQQgghxKVHklJCCCGEEEIIIYQQ4pyTpJQQQgghhBBCCCGEOOckKSWEEEIIIYQQQgghzjlJSgkhhBBCCCGEEEKIc06SUkIIIYQQQgghhBDinJOklBBCCCGEEEIIIYQ45yQpJYQQQgghhBBCCCHOOUlKCSGEEEIIIYQQQohzTpJSQgghRB+7+eabCQsL6+8wzrmwsDBuvvlm9fu4uDg0Gg1xcXG9dg6NRsOTTz7Za+P1tpdffpmBAwei0+kYPXp0v8Rgfd6/+OKLfjn/6c68J4QQQghxaZOklBBCCNGBtWvXotFo1C97e3sGDx7MihUrOHnyZH+H164LNe62bNiw4bxOPLVn48aN/OEPf2DKlCl8+OGHPPfcc316vnXr1vH666/36Tk6kpOT0+KeO/1r4sSJfXLO7l7zxo0bue222xgxYgQ6na7DZHFRURF33nkn4eHhODg4EBERwYMPPkhZWVmrfVNTU1m4cCHOzs54enpy4403Ulpa2qWYTn+ebGxs8PT0JDY2lvvuu4+jR492+dqEEEKIC5FNfwcghBBCXAiefvppwsPDMRgMJCQksHr1ajZs2MDhw4dxdHTs8Nj3338fi8VyjiJt6Wzi7m3Tp0+noaEBW1vbbh23YcMG3nnnnTYTUw0NDdjYnJ+/zmzZsgWtVsuaNWu6fc09sW7dOg4fPsz999/f5+fqyHXXXceiRYtabPPx8QEgLS0Nrbb3/iba3Wtet24dn3/+OTExMQQGBra7X21tLZMmTaKuro577rmH4OBgUlJSePvtt9m6dSv79+9XryM/P5/p06fj5ubGc889R21tLa+88gqHDh1iz549XXrt582bx0033YSiKFRVVZGSksJHH33Eu+++y4svvsiDDz7YpesTQgghLjTn529xQgghxHnmsssuY+zYsQDcfvvteHl58dprr/HNN99w3XXXtXlMXV0dTk5O6PX6cxlqC2cTd2/TarXY29v36pi9PV5vKikpwcHBodcSUoqiYDAYcHBw6JXx+kpMTAw33HBDm4/Z2dl1enxf3X8Azz33HO+//z56vZ4lS5Zw+PDhNvf79ttvyc3N5fvvv2fx4sXqdk9PT55++mlSUlIYM2aMOmZdXR379+8nJCQEgPHjxzNv3jzWrl3LnXfe2WlcgwcPbvWcvfDCC1x++eU89NBDREVFtUr0CSGEEBcDmb4nhBBC9MDs2bMByM7OBpr7Rjk7O5OVlcWiRYtwcXFh2bJl6mNnThOyWCy88cYbjBw5Ent7e3x8fFi4cCH79u1rsd8nn3xCbGwsDg4OeHp68tvf/pa8vLxzErfFYuH1119n+PDh2Nvb4+fnx1133UVFRUWLMRVF4ZlnniEoKAhHR0dmzZrFkSNHWp27vZ5SiYmJLFq0CA8PD5ycnIiOjuaNN95Q43vnnXeAltOcrNrqKXXgwAEuu+wyXF1dcXZ2Zs6cOezevbvFPtbpjTt27ODBBx/Ex8cHJycnrrrqqlbTrvbt28eCBQvw9vbGwcGB8PBwbr311g6fZ41Gw4cffkhdXZ0a89q1awEwmUz85S9/ISIiAjs7O8LCwnj88cdpbGxsMUZYWBhLlizh559/ZuzYsTg4OPDee++1eb6ZM2fyww8/kJubq56vrXvu2WefJSgoCHt7e+bMmUNmZmarsRITE1m4cCFubm44OjoyY8YMduzY0eH1dtWZPaWsr0N8fDz33HMPvr6+BAUFAVBTU8P9999PWFgYdnZ2+Pr6Mm/ePJKSkrp8zWcKDAzsUpK4uroaAD8/vxbbAwICAFokBr/88kuWLFmiJqQA5s6dy+DBg/n3v//d6bna4+Xlxb/+9S9sbGx49tln1e1NTU38+c9/JjY2Fjc3N5ycnJg2bRpbt25V91EUhbCwMK644opW4xoMBtzc3LjrrrvUbW+99RbDhw/H0dERDw8Pxo4dy7p163ocuxBCCNFVUiklhBBC9EBWVhbQ/MHRymQysWDBAqZOncorr7zS4fS42267jbVr13LZZZdx++23YzKZ2L59O7t371Yrm5599ln+7//+j9/85jfcfvvtlJaW8tZbbzF9+nQOHDiAu7t7n8Z91113sXbtWm655RZWrVpFdnY2b7/9NgcOHGDHjh3qh/s///nPPPPMMyxatIhFixaRlJTE/PnzaWpq6jSeTZs2sWTJEgICArjvvvvw9/cnNTWV77//nvvuu4+77rqLwsJCNm3axMcff9zpeEeOHGHatGm4urryhz/8Ab1ez3vvvcfMmTOJj49nwoQJLfZfuXIlHh4ePPHEE+Tk5PD666+zYsUKPv/8c6C52mn+/Pn4+Pjw6KOP4u7uTk5ODl999VWHcXz88cf8/e9/Z8+ePXzwwQcATJ48GWiuWPvoo4+45ppreOihh0hMTOT5558nNTWVr7/+usU4aWlpXHfdddx1113ccccdDBkypM3z/fGPf6Sqqor8/Hz++te/AuDs7NxinxdeeAGtVsvvf/97qqqqeOmll1i2bBmJiYnqPlu2bOGyyy4jNjaWJ554Aq1Wy4cffsjs2bPZvn0748eP7+wloL6+nlOnTrXY5ubm1mEy6J577sHHx4c///nP1NXVAfC73/2OL774ghUrVjBs2DDKyspISEggNTWVmJiYLl1zT02fPh2tVst9993Hq6++SlBQEAcPHuTZZ5/lyiuvJCoqCoCCggJKSkrUn9nTjR8/ng0bNpxVHCEhIcyYMYOtW7dSXV2Nq6sr1dXVfPDBB1x33XXccccd1NTUsGbNGhYsWMCePXsYPXo0Go2GG264gZdeeony8nI8PT3VMb/77juqq6vVyqz333+fVatWcc0113DfffdhMBg4ePAgiYmJXH/99WcVvxBCCNEpRQghhBDt+vDDDxVA+eWXX5TS0lIlLy9P+de//qV4eXkpDg4OSn5+vqIoirJ8+XIFUB599NFWYyxfvlwJDQ1Vv9+yZYsCKKtWrWq1r8ViURRFUXJychSdTqc8++yzLR4/dOiQYmNj02p7b8e9fft2BVA+/fTTFtt/+umnFttLSkoUW1tbZfHixWrsiqIojz/+uAIoy5cvV7dt3bpVAZStW7cqiqIoJpNJCQ8PV0JDQ5WKioo2nwdFUZR7771Xae9XFkB54okn1O+vvPJKxdbWVsnKylK3FRYWKi4uLsr06dNbPT9z585tca4HHnhA0el0SmVlpaIoivL1118rgLJ37942z9+R5cuXK05OTi22JScnK4By++23t9j++9//XgGULVu2qNtCQ0MVQPnpp5+6dL7Fixe3uM+srM/70KFDlcbGRnX7G2+8oQDKoUOHFEVpfs4jIyOVBQsWtHhO6uvrlfDwcGXevHkdnj87O1sB2vyyvuahoaEt7gnr6zB16lTFZDK1GM/NzU259957e3TNXdHZsR988IHi7u7e4jqWL1+uGI1GdZ+9e/cqgPLPf/6z1fEPP/ywAigGg6HDOIAOr/O+++5TACUlJUVRlOafm9NfR0VRlIqKCsXPz0+59dZb1W1paWkKoKxevbrFvr/61a+UsLAw9TW+4oorlOHDh3cYoxBCCNFXZPqeEEII0QVz587Fx8eH4OBgfvvb3+Ls7MzXX3/NgAEDWux39913dzrWl19+iUaj4Yknnmj1mHVq2ldffYXFYuE3v/kNp06dUr/8/f2JjIxsMVWnL+Jev349bm5uzJs3r8X5Y2NjcXZ2Vs//yy+/0NTUxMqVK1tMq+tK4+kDBw6QnZ3N/fff36rq6/SxuspsNrNx40auvPJKBg4cqG4PCAjg+uuvJyEhQZ2WZXXnnXe2ONe0adMwm83k5uYCqHF9//33GI3Gbsd0JmvlzJmNqx966CEAfvjhhxbbw8PDWbBgwVmfF+CWW25p0d9q2rRpABw/fhyA5ORkMjIyuP766ykrK1Nf87q6OubMmcO2bdu61LD/zjvvZNOmTS2+Ro0a1eExd9xxBzqdrsU2d3d3EhMTKSws7O6l9ooBAwYwfvx4Xn/9db7++msefPBBPv30Ux599FF1n4aGBqDtXlnWfmfWfXrKWv1VU1MDgE6nU19Hi8VCeXk5JpOJsWPHqlMboblP1YQJE/j000/VbeXl5fz4448sW7ZMve/d3d3Jz89n7969ZxWnEEII0RMyfU8IIYTognfeeYfBgwdjY2ODn58fQ4YMabWKmI2NjdoPpyNZWVkEBga2mFJzpoyMDBRFITIyss3Hu9o8vadxZ2RkUFVVha+vb5vjlpSUAKjJmzPj9PHxwcPDo8PYrFMJR4wY0aVr6UxpaSn19fVtTnEbOnQoFouFvLw8hg8frm4/vQ8QoMZs7Zs1Y8YMli5dylNPPcVf//pXZs6cyZVXXsn111/fpabdZ8rNzUWr1TJo0KAW2/39/XF3d1efT6vw8PBun6M9nV1rRkYGAMuXL293jKqqqk5f18jISObOndut2Nq6zpdeeonly5cTHBxMbGwsixYt4qabbmqRcOwrO3bsYMmSJS2m01555ZW4urry1FNPceuttzJs2DC1t9SZ/cCguXcTcNaN6WtrawFwcXFRt3300Ue8+uqrHDt2rEWy9Mzn8aabbmLFihXk5uYSGhrK+vXrMRqN3Hjjjeo+jzzyCL/88gvjx49n0KBBzJ8/n+uvv54pU6acVdxCCCFEV0hSSgghhOiC8ePHt9k35nR2dna9tty9xWJBo9Hw448/tqogga73zulp3BaLBV9f3xZVFqfz8fHp0vnPd209t9DcKBqaK7a++OILdu/ezXfffcfPP//Mrbfeyquvvsru3bt73MOoq5VgvbnSXmfXaq2Cevnllxk9enSb+/ZWz6YztXWdv/nNb5g2bRpff/01Gzdu5OWXX+bFF1/kq6++4rLLLuuTOKzee+89/Pz8Wv3s/OpXv+LJJ59k586dDBs2TG18XlRU1GqMoqIiPD09e5S8PN3hw4fR6XRqwumTTz7h5ptv5sorr+Thhx/G19cXnU7H888/ryZ6rX7729/ywAMP8Omnn/L444/zySefMHbs2BaJ26FDh5KWlsb333/PTz/9xJdffsm7777Ln//8Z5566qmzil0IIYTojCSlhBBCiHMsIiKCn3/+uVUD4jP3URSF8PBwBg8efI4jbD7/L7/8wpQpUzpMjISGhgLNVTanV7CUlpa2WqWvrXNA84fujipruprA8fHxwdHRkbS0tFaPHTt2DK1WS3BwcJfGOtPEiROZOHEizz77LOvWrWPZsmX861//4vbbb+/WOKGhoVgsFjIyMhg6dKi6/eTJk1RWVqrPZ0/0ZMrj6ayvh6ura7crnfpKQEAA99xzD/fccw8lJSXExMTw7LPPqkmps73m9pw8eRKz2dxqu7UqyWQyAc1T/Hx8fFqtmgmoTcfPxokTJ4iPj2fSpElqpdQXX3zBwIED+eqrr1pcf1vTgT09PVm8eDGffvopy5YtY8eOHbz++uut9nNycuLaa6/l2muvpampiauvvppnn32Wxx57TJ2GKIQQQvQF6SklhBBCnGNLly5FUZQ2qxCsVStXX301Op2Op556St12+j5lZWV9GuNvfvMbzGYzf/nLX1o9ZjKZqKysBJp7Vun1et56660Wcbb1wfdMMTExhIeH8/rrr6vjWZ0+lpOTE0Crfc6k0+mYP38+33zzDTk5Oer2kydPsm7dOqZOnYqrq2uncZ2uoqKi1fNvTTS0NWWrM4sWLQJaPz+vvfYaAIsXL+72mFZOTk5UVVX1+PjY2FgiIiJ45ZVX1CljpystLe3x2N1lNptbXYuvry+BgYEtnvezveb2DB48mJMnTxIXF9di+2effQbAmDFj1G1Lly7l+++/Jy8vT922efNm0tPT+fWvf93jGMrLy7nuuuswm8388Y9/VLdbK95Ovy8TExPZtWtXm+PceOONHD16lIcffhidTsdvf/vbFo+f+V5ia2vLsGHDUBSlV/qoCSGEEB2RSikhhBDiHJs1axY33ngjb775JhkZGSxcuBCLxcL27duZNWsWK1asICIigmeeeYbHHnuMnJwcrrzySlxcXMjOzubrr7/mzjvv5Pe//32fxThjxgzuuusunn/+eZKTk5k/fz56vZ6MjAzWr1/PG2+8wTXXXIOPjw+///3vef7551myZAmLFi3iwIED/Pjjj3h7e3d4Dq1Wy+rVq7n88ssZPXo0t9xyCwEBARw7dowjR47w888/A83JEoBVq1axYMGCNj9YWz3zzDNs2rSJqVOncs8992BjY8N7771HY2MjL730Urefh48++oh3332Xq666ioiICGpqanj//fdxdXVVE0zdMWrUKJYvX87f//53KisrmTFjBnv27OGjjz7iyiuvZNasWd0e0yo2NpbPP/+cBx98kHHjxuHs7Mzll1/e5eO1Wi0ffPABl112GcOHD+eWW25hwIABFBQUsHXrVlxdXfnuu+96HF931NTUEBQUxDXXXMOoUaNwdnbml19+Ye/evbz66qvqft295oMHD/Ltt98CkJmZSVVVFc888wzQ/NpYj12xYgUffvghl19+OStXriQ0NJT4+Hg+++wz5s2bx4QJE9QxH3/8cdavX8+sWbO47777qK2t5eWXX2bkyJHccsstXbre9PR0PvnkExRFobq6mpSUFNavX09tbS2vvfYaCxcuVPddsmQJX331FVdddRWLFy8mOzubv/3tbwwbNqzNZOLixYvx8vJi/fr1XHbZZa36xM2fPx9/f3+mTJmCn58fqampvP322yxevLhFHyshhBCiT/THkn9CCCHEhcK6ZP3evXs73G/58uWKk5NTu4+dufS8yWRSXn75ZSUqKkqxtbVVfHx8lMsuu0zZv39/i/2+/PJLZerUqYqTk5Pi5OSkREVFKffee6+SlpbW53EriqL8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v/7FsmXLWLx4sV5vxeUKCwsZNWoUl1xyCS+99BJQuxV16NChTJ06ldDQUKKjo4mJiWHnzp18++23bNq0iejoaG688UY6duzo4mcg4jravncBs1gs3HzzzXTu3Nl52YwZM1i6dCn5+fl4eHiQnp5OamoqycnJAFx77bUMHTqUli1buqpsESdfX1+GDh3KsWPHuO2224iKimLOnDn85S9/OWFjqmvXruTn5zNt2jRatGjhoqrlQlFVVUVUVJRztZPdbsdisTiH7tpsNsxms3MLX3BwMOPHj2f69Om0b9/elaWLOJWUlLB9+3bnqj6Hw4Gvry/PPvssFRUV/P73v2fDhg20adPGeR81pKSheXt7069fP/z8/Lj++usJDQ3lH//4B8AJG1PJycns2LGD6dOn07p1a1eULFJPRUUF1113Xb0ZfH/9619ZtmwZBw8exMfHh9LSUr788ks6duxIhw4dADQLTQStlLrglZWVOQfpffrpp0yePJl33nmHvn374nA4uPnmm6moqOCLL75wDpAUaczmz5/PG2+8gZ+fH9OnT6dbt25UV1dTWFhIs2bN9M1dzqkNGzY4m1J1q0e+/vprHn74YdatW4enpycmk8m5ysRqteLl5eXiqkX+y263c+WVVxIdHc2cOXMIDQ11vk7m5OQwceJEBgwYwOOPP64VUuJSVVVVeHt7OzM4e/Zs5s6dS+/evZkyZQotW7bEarVSXFxMRESE8wcFIo1Ffn6+c47k3//+d+68804+/vhj+vTpQ25uLg888ACtW7fmtddew2KxKL8i/6FPbhe4uoYUwJVXXsmSJUsYM2YMISEhhIWFERMTg4eHB76+vvogL42a3W4HYPz48dxxxx1UVFTw+OOPs379eqZMmUKPHj2orq7WByo5p/63IQW120zKysqwWCyYTCYeffRRhg8fjtVq1ak50uhYLBauvfZa9u3bx+zZszl27Jjz+31MTAwBAQHs2rUL0AopcS0fHx/nqdAA9957LzfddBOrVq3ipZdeYteuXUydOpXRo0djtVr1vlUanV8ebDJy5EhWrFjB+PHjiYqKIikpiSZNmlBcXIyXl5caUiK/oHfPF7i6D1KGYRAWFnbcvAibzUbHjh2x2+2YzWa9IZVGpy6rFouFmpoaPD09mTBhAiaTibfeeothw4Zht9v59ttv8fb2dnW5coGpW1FS90HJ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cCFff/01c+fOBeDFF1+kS5cu+Pv707x5cyZPnkxZWRkAy5Yt4+abb6akpMS56uqJJ54AoLq6mj/96U/ExMTg7+/PJZdcwrJly1zzREVERETOgJpSIiIiIi5w5ZVXkpiYyGeffQaA2Wxm9uzZbN++nXnz5vHjjz8ydepUAHr16sXLL79MkyZNyM3NJTc3lz/96U8A3H333aSmpvLJJ5+QlpbGhAkTGDp0KHv27HHZcxMRERE5HSbDMAxXFyEiIiJyobrpppsoLi5mwYIFx133u9/9jrS0NHbs2HHcdfPnz+fOO++koKAAqJ0pdf/991NcXOy8zYEDB2jZsiUHDhygWbNmzssHDhxIz549eeaZZ8758xERERE5VzxcXYCIiIjIxcowDEwmEwDff/89M2fOZNeuXRw7dgybzUZVVRUVFRX4+fmd8P7p6enY7Xbatm1b7/Lq6mrCwsLOe/0iIiIiZ0NNKREREREX2blzJwkJCezbt4+RI0dy11138fTTTxMaGsrKlSu59dZbsVqtJ21KlZWVYbFY2LhxIxaLpd51AQEBDfEURERERH4zNaVEREREXODHH38kPT2dKVOmsHHjRhwOBy+88AJmc+3Iz3/961/1bu/l5YXdbq93WVJSEna7nby8PC6//PIGq11ERETkXFBTSkREROQ8q66u5vDhw9jtdo4cOcI333zDzJkzGTlyJJMmTWLbtm3U1NTw6quvMmrUKFatWsUbb7xR7zHi4+MpKyvjhx9+IDExET8/P9q2bcvvf/97Jk2axAsvvEBSUhL5+fn88MMPdO3alREjRrjoGYuIiIicmk7fExERETnPvvnmG6Kjo4mPj2fo0KEsXbqU2bNns3DhQiwWC4mJibz44ovMmjWLzp078+GHHzJz5sx6j9GrVy/uvPNOrr32Wpo2bcqzzz4LwLvvvsukSZN48MEHadeuHWPHjmX9+vXExcW54qmKiIiInDadviciIiIiIiIiIg1OK6VERERERERERKTBqSklIiIiIiIiIiINTk0pERERERERERFpcGpKiYiIiIiIiIhIg1NTSkREREREREREGpyaUiIiIiIiIiIi0uDUlBIRERERERERkQanppSIiIiIiIiIiDQ4NaVERERERERERKTBqSklIiIiIiIiIiINTk0pERERERERERFpcGpKiYiIiIiIiIhIg/t/+ZYObJthNAcAAAAASUVORK5CYII=\n"},"metadata":{}}],"source":["# ---- Plot: Actual Prices & Predicted Price Bounds ----#\n","NDAYS = 180  # Number of days to plot\n","\n","plt.style.use('default')  # Use the default plot style\n","\n","# Select only the first N days of data\n","price_predictions_60_days = bands_df.head(NDAYS)\n","\n","# Create the plot\n","plt.figure(figsize=(12, 4))\n","plt.plot(price_predictions_60_days.index, price_predictions_60_days['min_predicted_price'],\n","         label='Lower Bound', color='darkgray')  # Plot lower bound\n","plt.plot(price_predictions_60_days.index, price_predictions_60_days['max_predicted_price'],\n","         label='Upper Bound', color='darkgray')  # Plot upper bound\n","plt.plot(price_predictions_60_days.index, price_predictions_60_days['actual_price'],\n","         label='Actual Price')  # Plot actual price\n","\n","# Add title and labels\n","plt.title(f'Price Predictions for the First {NDAYS} Days')\n","plt.xlabel('Date')\n","plt.ylabel('Price')\n","\n","# Set the date format for the x-axis\n","plt.gca().xaxis.set_major_locator(mdates.MonthLocator())  # Major ticks for each month\n","plt.xticks(rotation=45)  # Rotate x-axis labels for better readability\n","plt.legend()  # Display legend\n","plt.grid()  # Show grid\n","\n","# Show the plot\n","plt.tight_layout()  # Adjust layout to make room for labels\n","plt.show()  # Display the figure\n"]},{"cell_type":"markdown","source":["## 4. Trading Strategies\n","- **Overview**: Use the generated predictions to simulate trading and visualize results.\n","- **Key Components**:\n","  - **Reversal Strategy**: Simulate trading actions based on price reversals, visualizing buy and sell signals on price charts.\n","  - **Days-Based Strategy**: Implement a strategy that automatically closes positions after a predetermined number of days, displaying performance over time.\n","\n"],"metadata":{"id":"eQ_KZdLAXmlx"}},{"cell_type":"code","source":["# ---- Reversal Strategy ---- #\n","\n","LOSS_SENTINEL = 0.05  # Set stop loss limit\n","GAIN_SENTINEL = 0.2    # Set take profit limit\n","\n","# Assume df is your DataFrame\n","df = bands_df.copy()  # Read data into a copy of the DataFrame\n","\n","# Initialize variables\n","trade_log = []  # To record trade actions\n","trades = []     # To track open trades\n","\n","# Trading strategy\n","for i in range(len(df)):\n","    date_str = df.index[i]  # Get the date as a string\n","    date = pd.to_datetime(date_str)  # Convert to datetime object\n","    actual_price = df.iloc[i]['actual_price']\n","    min_predicted_price = df.iloc[i]['min_predicted_price']\n","    max_predicted_price = df.iloc[i]['max_predicted_price']\n","\n","    # Opening conditions\n","    if not len(trades):  # Check if there are no open trades\n","        if actual_price <= min_predicted_price:  # Buy condition\n","            trades.append({'date': date, 'action': 'buy', 'price': actual_price})\n","            trade_log.append({'date': date, 'action': 'buy', 'price': actual_price, 'close_date': '', 'return': 0})\n","\n","        elif actual_price >= max_predicted_price:  # Sell condition\n","            trades.append({'date': date, 'action': 'sell', 'price': actual_price})\n","            trade_log.append({'date': date, 'action': 'sell', 'price': actual_price, 'close_date': '', 'return': 0})\n","\n","    # Closing conditions\n","    for trade in trades:\n","        trade_date = trade['date']  # Get trade date\n","        log_return = np.log(actual_price / trade['price'])  # Calculate log return compared to cost price\n","        actual_return = actual_price - trade['price']\n","\n","        if trade['action'] == 'buy':  # Buy closing conditions\n","            if trade['price'] >= min_predicted_price or log_return >= GAIN_SENTINEL or log_return <= -LOSS_SENTINEL:\n","                trade_log.append({'date': trade_date, 'action': 'close_buy', 'price': 0, 'close_date': date, 'return': actual_return})\n","                trades.remove(trade)  # Remove closed trade\n","\n","        elif trade['action'] == 'sell':  # Sell closing conditions\n","            if trade['price'] <= max_predicted_price or log_return >= GAIN_SENTINEL or log_return <= -LOSS_SENTINEL:\n","                trade_log.append({'date': trade_date, 'action': 'close_sell', 'price': 0, 'close_date': date, 'return': actual_return})\n","                trades.remove(trade)  # Remove closed trade\n","\n","# Convert trade log to DataFrame\n","trade_log_df = pd.DataFrame(trade_log)\n","print(trade_log_df)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UHRft13Mt_hI","executionInfo":{"status":"ok","timestamp":1727456922914,"user_tz":-480,"elapsed":712,"user":{"displayName":"sc201jun24c","userId":"02069774851930120564"}},"outputId":"3bd460b6-a265-49e9-e6a3-0976c91e06fa"},"execution_count":210,"outputs":[{"output_type":"stream","name":"stdout","text":["          date     action       price           close_date     return\n","0   2022-08-31        buy   15.076043                        0.000000\n","1   2022-08-31  close_buy    0.000000  2022-09-01 00:00:00  -1.155625\n","2   2022-09-02        buy   13.630764                        0.000000\n","3   2022-09-02  close_buy    0.000000  2022-09-15 00:00:00  -0.713381\n","4   2022-09-16        buy   13.186142                        0.000000\n","..         ...        ...         ...                  ...        ...\n","117 2024-08-02  close_buy    0.000000  2024-08-05 00:00:00  -6.819443\n","118 2024-08-06        buy  104.241258                        0.000000\n","119 2024-08-06  close_buy    0.000000  2024-08-07 00:00:00  -5.339542\n","120 2024-08-08        buy  104.961200                        0.000000\n","121 2024-08-08  close_buy    0.000000  2024-08-19 00:00:00  25.027907\n","\n","[122 rows x 5 columns]\n"]}]},{"cell_type":"code","source":["# ---- Reversal Strategy ---- #\n","# Organize trading records\n","\n","df = trade_log_df.copy()  # Create a copy of the trade log DataFrame\n","\n","# Sort the DataFrame by 'date' and 'action' columns\n","sorted_df = df.sort_values(by=['date', 'action'], ascending=[True, True])\n","\n","# Reset the index\n","sorted_df.reset_index(drop=True, inplace=True)\n","\n","# Display the sorted DataFrame\n","print(sorted_df)\n","\n","# Calculate total return\n","total_return = sorted_df['return'].sum()\n","print(f\"Total Return: {total_return:.6f}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uSBFtp4ez65v","executionInfo":{"status":"ok","timestamp":1727457001609,"user_tz":-480,"elapsed":453,"user":{"displayName":"sc201jun24c","userId":"02069774851930120564"}},"outputId":"d445324f-106f-495f-c850-4b5d584276ac"},"execution_count":212,"outputs":[{"output_type":"stream","name":"stdout","text":["          date     action       price           close_date     return\n","0   2022-08-31        buy   15.076043                        0.000000\n","1   2022-08-31  close_buy    0.000000  2022-09-01 00:00:00  -1.155625\n","2   2022-09-02        buy   13.630764                        0.000000\n","3   2022-09-02  close_buy    0.000000  2022-09-15 00:00:00  -0.713381\n","4   2022-09-16        buy   13.186142                        0.000000\n","..         ...        ...         ...                  ...        ...\n","117 2024-08-02  close_buy    0.000000  2024-08-05 00:00:00  -6.819443\n","118 2024-08-06        buy  104.241258                        0.000000\n","119 2024-08-06  close_buy    0.000000  2024-08-07 00:00:00  -5.339542\n","120 2024-08-08        buy  104.961200                        0.000000\n","121 2024-08-08  close_buy    0.000000  2024-08-19 00:00:00  25.027907\n","\n","[122 rows x 5 columns]\n","Total Return: 47.675433\n"]}]},{"cell_type":"code","source":["# ---- Reversal Strategy ---- #\n","# Organize trading records - Merge individual trades for display\n","\n","df = sorted_df.copy()  # Create a copy of the sorted DataFrame\n","\n","# Define aggregation functions\n","def first_valid_action(actions):\n","    # Filter out actions containing \"close_\"\n","    valid_actions = [action for action in actions if 'close_' not in action]\n","    return valid_actions[0] if valid_actions else None  # Return the first valid action or None\n","\n","agg_funcs = {\n","    'action': first_valid_action,  # Aggregate actions while excluding \"close_\" actions\n","    'price': 'sum',  # Sum prices, as the price on the close day is set to 0\n","    'close_date': lambda x: x[x != ''].iloc[0] if (x[x != ''].size > 0) else None,  # Get the first close_date (buy date is empty)\n","    'return': 'sum'  # Sum the returns; the buy day's return is set to 0\n","}\n","\n","# Group by date and aggregate the corresponding rows\n","df_summary = df.groupby('date').agg(agg_funcs).reset_index()\n","\n","# Display the results\n","print(df_summary.head())\n","\n","# Print total number of trades\n","print(f\"Total number of trades: {df_summary.index.max() + 1}\")\n","\n","# Calculate total return\n","total_return = df_summary['return'].sum()\n","print(f\"Total Return (USD): {total_return:.6f}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9I-U6u3T04Ic","executionInfo":{"status":"ok","timestamp":1727457003926,"user_tz":-480,"elapsed":404,"user":{"displayName":"sc201jun24c","userId":"02069774851930120564"}},"outputId":"a64e73e0-dc9f-47ae-a226-7b37aabecfd7"},"execution_count":213,"outputs":[{"output_type":"stream","name":"stdout","text":["        date action      price close_date    return\n","0 2022-08-31    buy  15.076043 2022-09-01 -1.155625\n","1 2022-09-02    buy  13.630764 2022-09-15 -0.713381\n","2 2022-09-16    buy  13.186142 2022-09-23 -0.681386\n","3 2022-09-26    buy  12.217014 2022-10-11 -0.641423\n","4 2022-10-12    buy  11.489668 2022-11-04  2.653613\n","Total number of trades: 61\n","Total Return (USD): 47.675433\n"]}]},{"cell_type":"code","source":["# ---- Reversal Strategy ---- #\n","# Organize trading records - Merge individual trades for display\n","# This code processes trading records by aggregating trades that occurred on the same date.\n","# It filters out closing actions while summing up the prices and returns for each date,\n","# ensuring a clear and concise representation of trading activity.\n","\n","df_prices = bands_df.copy()\n","df_trades = df_summary.copy()\n","\n","# Ensure the index of df_prices is in datetime format\n","df_prices.index = pd.to_datetime(df_prices.index)\n","\n","# Ensure the 'date' column in df_trades is in datetime format\n","if 'date' in df_trades.columns:\n","    df_trades['date'] = pd.to_datetime(df_trades['date'], errors='coerce')  # Convert to datetime, setting invalid parses to NaT\n","else:\n","    raise ValueError(\"df_trades should have a 'date' column.\")  # Raise error if 'date' column is missing\n","\n","# Check if the conversion was successful\n","print(df_trades['date'].dtype)  # Should be datetime64[ns]\n","\n","# Define start and end dates\n","START = df_prices.index.min()\n","END = df_prices.index.max()\n","\n","# Create a complete date range\n","full_dates = pd.date_range(start=START, end=END, freq='D')  # Daily frequency\n","df_full = pd.DataFrame(full_dates, columns=['DATE']).set_index('DATE')  # DataFrame with dates as index\n","\n","# Merge price data\n","df_merged = pd.merge(df_full, df_prices, left_index=True, right_index=True, how='left')  # Left join prices to the full date range\n","\n","# Convert 'date' column in df_trades to datetime format\n","df_trades['date'] = pd.to_datetime(df_trades['date'], errors='coerce')\n","\n","# Set the 'date' column in df_trades as the index\n","df_trades.set_index('date', inplace=True)\n","\n","# Merge price and trade data using left date index\n","df_merged = pd.merge(df_merged, df_trades, left_index=True, right_index=True, how='left')  # Left join trades to the merged DataFrame\n","\n","# Create a filled DataFrame for further analysis\n","df_filled = df_merged.copy()\n","\n","# Calculate cumulative returns\n","df_filled['cumulative_return'] = df_filled['return'].fillna(0).cumsum()  # Fill NaN with 0 for cumulative calculation\n","\n","# Forward fill any remaining NaN values\n","df_filled = df_filled.ffill()\n","\n","# Display the results\n","print(df_filled)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"imkVVXA_4jCN","executionInfo":{"status":"ok","timestamp":1727457181418,"user_tz":-480,"elapsed":499,"user":{"displayName":"sc201jun24c","userId":"02069774851930120564"}},"outputId":"3fe4dce4-2f6b-4b34-9fa2-86b5d7ab6dd5"},"execution_count":215,"outputs":[{"output_type":"stream","name":"stdout","text":["datetime64[ns]\n","            actual_price  min_predicted_price  max_predicted_price action       price close_date     return  cumulative_return\n","DATE                                                                                                                          \n","2022-08-31     15.076043            18.308071            22.234749    buy   15.076043 2022-09-01  -1.155625          -1.155625\n","2022-09-01     13.920418            18.544912            22.661152    buy   15.076043 2022-09-01  -1.155625          -1.155625\n","2022-09-02     13.630764            18.681885            22.924525    buy   13.630764 2022-09-15  -0.713381          -1.869006\n","2022-09-03     13.630764            18.681885            22.924525    buy   13.630764 2022-09-15  -0.713381          -1.869006\n","2022-09-04     13.630764            18.681885            22.924525    buy   13.630764 2022-09-15  -0.713381          -1.869006\n","...                  ...                  ...                  ...    ...         ...        ...        ...                ...\n","2024-08-26    126.449413           108.976599           131.411058    buy  104.961200 2024-08-19  25.027907          47.675433\n","2024-08-27    128.289261           110.282225           133.217838    buy  104.961200 2024-08-19  25.027907          47.675433\n","2024-08-28    125.599492           110.731949           134.114685    buy  104.961200 2024-08-19  25.027907          47.675433\n","2024-08-29    117.580152           103.637951           126.035273    buy  104.961200 2024-08-19  25.027907          47.675433\n","2024-08-30    119.359993           116.508274           142.932885    buy  104.961200 2024-08-19  25.027907          47.675433\n","\n","[731 rows x 8 columns]\n"]}]},{"cell_type":"code","source":["# Plotting: Reversal Strategy Results - With Cumulative Deposit\n","\n","OFFSET = 0  # Prevent overlap of closing markers\n","LENGTH = 30  # Change chart time length\n","SIZE = 15  # Size of markers\n","\n","# Convert date format\n","df_filled = df_filled.copy()\n","df_filled.index = pd.to_datetime(df_filled.index)\n","df_trade = df_summary.copy()\n","\n","# Get the date of the first trade as the start date\n","start_date = df_filled.index.min()\n","\n","# Find the end date of the trades\n","end_date = df_filled['close_date'].max() if not df_filled['close_date'].isnull().all() else start_date + pd.Timedelta(days=LENGTH)\n","\n","# Get price data for the corresponding date range\n","df_prices_30 = df_filled[(df_filled.index >= start_date) & (df_filled.index <= end_date)]\n","\n","# Set figure size\n","fig, ax1 = plt.subplots(figsize=(8, 5))\n","\n","# Plot actual price line chart\n","ax1.plot(df_prices_30.index, df_prices_30['actual_price'], label='Actual Price')\n","\n","# Plot predicted price upper and lower bounds\n","ax1.plot(df_prices_30.index, df_prices_30['min_predicted_price'], label='Lower Bound', color='darkgray')\n","ax1.plot(df_prices_30.index, df_prices_30['max_predicted_price'], label='Upper Bound', color='darkgray')\n","\n","# Annotate trade points\n","for _, trade in df_trade.iterrows():\n","    trade_date = trade['date']\n","    close_date = trade['close_date']\n","    action = trade['action']\n","\n","    actual_close_price = df_prices_30[df_prices_30.index == close_date]['actual_price'].values[0]\n","    if action == 'buy':\n","        ax1.scatter(trade_date, trade['price'], marker='^', color='green', s=SIZE, zorder=5)\n","        ax1.scatter(close_date, actual_close_price + OFFSET, marker='v', color='#8B0000', s=SIZE, zorder=5, alpha=0.9)\n","    elif action == 'sell':\n","        ax1.scatter(trade_date, trade['price'], marker='v', color='red', s=SIZE, zorder=5)\n","        ax1.scatter(close_date, actual_close_price - OFFSET, marker='^', color='#4CAF50', s=SIZE, zorder=5, alpha=1)\n","\n","# Plot cumulative return bar chart\n","colors = ['green' if val >= 0 else 'red' for val in df_prices_30['cumulative_return']]\n","ax1.bar(df_prices_30.index, df_prices_30['cumulative_return'], color=colors, alpha=0.6)\n","\n","# Set title and labels\n","ax1.set_title('Price Trend with Trading Actions (Closed Based on Log Return)')\n","ax1.set_xlabel('Date')\n","ax1.set_ylabel('Price')\n","\n","# Set legend position to lower left and slightly adjust upwards\n","ax1.legend(loc='upper left')\n","ax1.grid()\n","\n","# Create a second y-axis\n","ax2 = ax1.twinx()  # Create a new y-axis\n","ax2.set_ylabel('Cumulative Deposit')\n","\n","# Synchronize y-axis range\n","ax2.set_ylim(ax1.get_ylim())  # Match ax2 range with ax1\n","\n","# Draw a horizontal line at y=0\n","ax2.axhline(0, color='darkgray', linewidth=0.8, linestyle='--')\n","\n","# Display the figure\n","plt.xticks(rotation=45)\n","plt.tight_layout()\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":507},"id":"dQPSJ4_V3eWE","executionInfo":{"status":"ok","timestamp":1727458554426,"user_tz":-480,"elapsed":4787,"user":{"displayName":"sc201jun24c","userId":"02069774851930120564"}},"outputId":"16871c65-abdc-4a5d-d8e3-10aa1f5866cd"},"execution_count":233,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 800x500 with 2 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAAxYAAAHqCAYAAACZcdjsAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAEAAElEQVR4nOzdd3gU1dfA8e/W9J5AQg0Qeq+K9F4URFBEQURRLC8ggr1RxF6xd7Hys6MC0jvSBEKXJp0EQnrPlnn/WGbYzW7KJoFQzud58pCdmb17Z3Y33DPnFp2iKApCCCGEEEIIUQ76yq6AEEIIIYQQ4vIngYUQQgghhBCi3CSwEEIIIYQQQpSbBBZCCCGEEEKIcpPAQgghhBBCCFFuElgIIYQQQgghyk0CCyGEEEIIIUS5SWAhhBBCCCGEKDcJLIQQQgghhBDlJoGFuGjGjBlDbGxsZVfjkjNt2jR0Ot0FK1+n0zFt2rRSHzt+/PgLVpcLxdM1jI2NZcyYMZVToYtk5cqV6HQ6Vq5cWdlVKdLx48fx9fVl3bp1ZXr+kSNH0Ol0zJ49u2IrVkEu9Pe3sl0OnzFR8T766CNq1apFfn5+ZVdFXGYksBClMnv2bHQ6nfbj6+tLgwYNGD9+PKdPn67s6nnkXN/ifq62/zD//vtvpk2bRlpaWoWV2b1791Jd69IGOFeKtLQ0fH190el07N27t8zlfPDBB5dsw7okM2bM4JprrqFTp05u+1auXMnQoUOJjo7GbDZTpUoVBg0axK+//loJNb2wxowZ4/JdMBqN1KxZkxEjRrBnz57Krt5lQw3kzp49W9lVcXtPfXx8aNCgAc899xx5eXllKnPBggWXxN/JMWPGUFBQwMcff1zZVRGXGWNlV0BcXmbMmEGdOnXIy8tj7dq1fPjhhyxYsIBdu3bh7+9f7HM//fRT7Hb7RaopfPPNNy6Pv/76a5YsWeK2vXHjxhetTpUhNzcXo/H8V/3vv/9m+vTpjBkzhtDQ0Ap5jaeffpp77rlHe7x582beeecdnnrqKZfr26JFiwp5vdLYt28fen3l3jv56aef0Ol0REdH89133zFz5swylfPBBx8QGRnploHp2rUrubm5mM3mCqhtxUtKSuKrr77iq6++cts3depUZsyYQf369bnvvvuoXbs2ycnJLFiwgGHDhvHdd99x++23V0KtLxwfHx8+++wzAKxWK4cOHeKjjz5i4cKF7Nmzh2rVqlVyDYW3nN/T9PR0fv/9d55//nkOHTrEd99953V5CxYs4P3336/04MLX15c777yTN998kwkTJlzRWTlRsSSwEF4ZMGAA7dq1A+Cee+4hIiKCN998k99//53bbrvN43Oys7MJCAjAZDJdzKoyatQol8cbNmxgyZIlbtsLy8nJKTFIupz4+vpe8Nfo06eP22u+88479OnTh+7duxf5PPWzcSH4+PhckHK98e233zJw4EBq167N999/X+bAoih6vf6ivL9l9e2332I0Ghk0aJDL9p9//pkZM2Zw88038/3337v8bXj00UdZtGgRFovlYlf3gjMajW5/f6699lpuuOEG5s+fz7333ltJNRNlVfg9ffDBB7nuuuuYM2cOb775JlWrVq3E2p1Xlr+1w4cP59VXX2XFihX07NnzAtVMXGmkK5QoF/WPzeHDhwFH+jQwMJBDhw4xcOBAgoKCGDlypLav8BgLu93OrFmzaN68Ob6+vkRFRdG/f3/++ecfl+O+/fZb2rZti5+fH+Hh4YwYMYLjx4+Xu/7du3enWbNmbNmyha5du+Lv789TTz0FQH5+PlOnTiUuLg4fHx9q1qzJY4895tbnVB2XMHfuXJo1a4aPjw9NmzZl4cKFbq+3du1a2rdvj6+vL/Xq1St1mvmdd97BYDC4dF9644030Ol0TJ48Wdtms9kICgri8ccfd6mfevdr2rRpPProowDUqVNHS+EfOXLE5fVKcy7eUrsw7Nmzh9tvv52wsDA6d+4MwI4dOxgzZgx169bF19eX6Oho7r77bpKTk93KKe01LDzGQu3Ot27dOiZPnkxUVBQBAQHcdNNNJCUluTzXbrczbdo0qlWrhr+/Pz169GDPnj1ejds4duwYa9asYcSIEYwYMYLDhw/z999/ezz222+/pUOHDvj7+xMWFkbXrl1ZvHixdh67d+9m1apV2vulBmtF9X//6aeftO9LZGQko0aN4uTJky7HqN/VkydPMmTIEAIDA4mKiuKRRx7BZrO5HPu///2Ptm3bEhQURHBwMM2bN2fWrFklXoO5c+dyzTXXEBgY6LL92WefJTw8nC+++MLjDYd+/fpxww03FFv28uXL6dKlCwEBAYSGhnLjjTe6dTfLzMxk0qRJxMbG4uPjQ5UqVejTpw9bt251OW7jxo3079+fkJAQ/P396datm8cxIWX9/hYnOjoawCWrmJKSwiOPPELz5s0JDAwkODiYAQMGsH37drfnv/vuuzRt2lT77LRr147vv//e5ZiTJ09y9913U7VqVe07/cUXX7iVdeLECYYMGUJAQABVqlTh4Ycf9qqP/bZt2xgwYADBwcEEBgbSq1cvNmzY4HKMN9/D8ijN5wMc36F27dq5vKflGTej0+no3LkziqLw33//uez766+/tDoFBQVx/fXXs3v3bm3/mDFjeP/997Vy1B+1np6+657GIBX3/7A3/1+1bduW8PBwfv/99zJdC3F1koyFKJdDhw4BEBERoW2zWq3069ePzp078/rrrxd793/s2LHMnj2bAQMGcM8992C1WlmzZg0bNmzQMiMvvPACzz77LMOHD+eee+4hKSmJd999l65du7Jt27Zyd+dJTk5mwIABjBgxglGjRlG1alXsdjuDBw9m7dq1jBs3jsaNG7Nz507eeust9u/fz9y5c13KWLt2Lb/++isPPvggQUFBvPPOOwwbNoxjx45p12bnzp307duXqKgopk2bhtVqZerUqaW6o9WlSxfsdjtr167VGlxr1qxBr9ezZs0a7bht27aRlZVF165dPZYzdOhQ9u/fz5w5c3jrrbeIjIwEICoqyqtzKY9bbrmF+vXr8+KLL6IoCgBLlizhv//+46677iI6Oprdu3fzySefsHv3bjZs2KD951qea6iaMGECYWFhTJ06lSNHjvD2228zfvx4fvjhB+2YJ598kldffZVBgwbRr18/tm/fTr9+/bzqNz1nzhwCAgK44YYb8PPzo169enz33Xdcd911LsdNnz6dadOmcd111zFjxgzMZjMbN25k+fLl9O3bl7fffpsJEyYQGBjI008/DVDs+c6ePZu77rqL9u3b89JLL3H69GlmzZrFunXr3L4vNpuNfv36cc011/D666+zdOlS3njjDerVq8cDDzwAON6b2267jV69evHKK68AsHfvXtatW8dDDz1UZD0sFgubN2/WylEdOHCAf//9l7vvvpugoKBSX09nS5cuZcCAAdStW5dp06aRm5vLu+++S6dOndi6dat2A+P+++/n559/Zvz48TRp0oTk5GTWrl3L3r17adOmDeBogA4YMIC2bdsydepU9Ho9X375JT179mTNmjV06NABqJjPHqCNDbDZbPz33388/vjjREREuARS//33H3PnzuWWW26hTp06nD59mo8//phu3bq5dJn69NNPmThxIjfffDMPPfQQeXl57Nixg40bN2rdyE6fPs21116rNSijoqL466+/GDt2LBkZGUyaNAlwdJns1asXx44dY+LEiVSrVo1vvvmG5cuXl+q8du/eTZcuXQgODuaxxx7DZDLx8ccf0717d1atWsU111zjcnxpvodlVdrPx7Zt2+jfvz8xMTFMnz4dm83GjBkzXP4eloV6oyYsLEzb9s0333DnnXfSr18/XnnlFXJycvjwww/p3Lkz27ZtIzY2lvvuu49Tp0557LLrreL+H/bmb3ybNm3KPPGCuEopQpTCl19+qQDK0qVLlaSkJOX48ePK//73PyUiIkLx8/NTTpw4oSiKotx5550KoDzxxBNuZdx5551K7dq1tcfLly9XAGXixIlux9rtdkVRFOXIkSOKwWBQXnjhBZf9O3fuVIxGo9v24vzf//2fUvgj361bNwVQPvroI5ft33zzjaLX65U1a9a4bP/oo48UQFm3bp22DVDMZrNy8OBBbdv27dsVQHn33Xe1bUOGDFF8fX2Vo0ePatv27NmjGAwGt3oVZrPZlODgYOWxxx5TFMVxfSIiIpRbbrlFMRgMSmZmpqIoivLmm28qer1eSU1Ndanf1KlTtcevvfaaAiiHDx92e53SnktJfvrpJwVQVqxYoW2bOnWqAii33Xab2/E5OTlu2+bMmaMAyurVq7Vt3lzD2rVrK3feeaf2WP0M9+7dW/t8KYqiPPzww4rBYFDS0tIURVGUxMRExWg0KkOGDHEpb9q0aQrgUmZxmjdvrowcOVJ7/NRTTymRkZGKxWLRth04cEDR6/XKTTfdpNhsNpfnO9exadOmSrdu3dxeY8WKFS7XuaCgQKlSpYrSrFkzJTc3Vztu3rx5CqA899xz2jb1uzpjxgyXMlu3bq20bdtWe/zQQw8pwcHBitVqLdV5qw4ePOjxc/P7778rgPLWW2+VqpzDhw8rgPLll19q21q1aqVUqVJFSU5O1rZt375d0ev1yujRo7VtISEhyv/93/8VWbbdblfq16+v9OvXz+V65+TkKHXq1FH69OmjbSvP91dRzl/vwj/Vq1dXtmzZ4nJsXl6e2+fh8OHDio+Pj8v7deONNypNmzYt9nXHjh2rxMTEKGfPnnXZPmLECCUkJET77r399tsKoPz444/aMdnZ2UpcXJzbd9mTIUOGKGazWTl06JC27dSpU0pQUJDStWtXbVtpv4dFUf+OJCUlFXlMaT8fgwYNUvz9/ZWTJ09q2w4cOKAYjcZSv6cBAQFKUlKSkpSUpBw8eFB5/fXXFZ1OpzRr1kw7v8zMTCU0NFS59957XZ6fmJiohISEuGz39P+Uorh/11Wevh/F/T/s7d/4cePGKX5+fiVeCyFU0hVKeKV3795ERUVps5kEBgby22+/Ub16dZfjCt+l9OSXX35Bp9MxdepUt33qHepff/0Vu93O8OHDOXv2rPYTHR1N/fr1WbFiRbnPycfHh7vuustl208//UTjxo1p1KiRy+uqXb8Kv27v3r2pV6+e9rhFixYEBwdrqXCbzcaiRYsYMmQItWrV0o5r3Lgx/fr1K7GOer2e6667jtWrVwOOO8bJyck88cQTKIrC+vXrAUcWo1mzZuXK4pR0LuV1//33u23z8/PTfs/Ly+Ps2bNce+21AFq3lfJeQ9W4ceNcujl06dIFm83G0aNHAVi2bBlWq5UHH3zQ5XkTJkwo9Wvs2LGDnTt3uow7uu222zh79iyLFi3Sts2dOxe73c5zzz3nNtC8LF0x/vnnH86cOcODDz7oMvbi+uuvp1GjRsyfP9/tOYXfjy5duri816GhoWRnZ7NkyRKv6qJ2Y3O+awuQkZEBUOZsRUJCAvHx8YwZM4bw8HBte4sWLejTpw8LFixwqfvGjRs5deqUx7Li4+M5cOAAt99+O8nJydr3PDs7m169erF69WrsdnuFffZ8fX1ZsmQJS5YsYdGiRXz88ccEBgYycOBA9u/frx3n4+OjfR5sNhvJyckEBgbSsGFDl25coaGhnDhxgs2bN3t8PUVR+OWXXxg0aBCKorj8LevXrx/p6elaeQsWLCAmJoabb75Ze76/vz/jxo0r8bxsNhuLFy9myJAh1K1bV9seExPD7bffztq1a7X3XVXS97CsSvv5sNlsLF26lCFDhrgMmo+Li2PAgAGlfr3s7GyioqKIiooiLi6ORx55hE6dOvH7779r57dkyRLS0tK0vwHqj8Fg4JprrqmQ/8c8Ker/YW/+xoeFhZGbm0tOTs4FqaO48khXKOGV999/nwYNGmA0GqlatSoNGzZ0axAZjUZq1KhRYlmHDh2iWrVqLn/8Cztw4ACKolC/fn2P+ytiQHj16tXdZtU5cOAAe/fuLTIlfubMGZfHzo0NVVhYGKmpqYBjdpzc3FyP59GwYUOXxlBRunTpoqX116xZQ0xMDG3atKFly5asWbOGPn36sHbtWoYPH15iWcUp6VzKq06dOm7bUlJSmD59Ov/73//crm16ejpQMdcQ3M9Pbfiq56c2bOLi4lyOCw8Pd2skF+Xbb78lICCAunXrcvDgQcDRqIyNjeW7777j+uuvBxzfAb1eT5MmTUpVbknUujds2NBtX6NGjVi7dq3LNnVck7PC7/WDDz7Ijz/+yIABA6hevTp9+/Zl+PDh9O/fv1R1Us51d1MFBwcDjvEPZVHcOTZu3JhFixZpA1VfffVV7rzzTmrWrEnbtm0ZOHAgo0eP1hq/Bw4cAODOO+8s8vXS09PJz8+vkM+ewWCgd+/eLtsGDhxI/fr1efLJJ/nll1+A82PPPvjgAw4fPuwy5sW5q8rjjz/O0qVL6dChA3FxcfTt25fbb79dm9o3KSmJtLQ0PvnkEz755BOPdVK/b0ePHiUuLs4toPV0nQtLSkoiJyenyPfEbrdz/PhxmjZtqm0v6XtYVqX9fGRkZJCbm+v2PQf3735xfH19+fPPPwHHGJVXX32VM2fOuNwsUT9nRQ2AVr8TFam4/4e9+Ruvfn9lVihRWhJYCK906NBBG/tQFOe7beVlt9vR6XT89ddfGAwGt/2FB4WWhfN/AM6v27x5c958802Pz6lZs6bLY091A/dGVXl07twZi8XC+vXrWbNmDV26dAEcAceaNWv4999/SUpK0raX1YU+F0/Xe/jw4fz99988+uijtGrVisDAQOx2O/3796/wKYov9PkpisKcOXPIzs72GDCcOXOGrKysCvnslldR18JZlSpViI+PZ9GiRfz111/89ddffPnll4wePdrjNLIqtQFcuLHSqFEjwDFm4UIbPnw4Xbp04bfffmPx4sW89tprvPLKK/z6668MGDBA+2y99tprtGrVymMZgYGBF3SRsBo1atCwYUMtGwnw4osv8uyzz3L33Xfz/PPPEx4ejl6vZ9KkSS7fh8aNG7Nv3z7mzZvHwoUL+eWXX/jggw947rnnmD59unbsqFGjigyeLuYU0M4uxt/Mi6FwsNivXz8aNWrEfffdxx9//AGgvQ/ffPONNljfmfPA/aIU1bAvPNGCqrj/h7259qmpqfj7+3v8uy2EJxJYiEpTr149Fi1aREpKSpFZi3r16qEoCnXq1KFBgwYXtW7bt2+nV69eFXKnJioqCj8/P+3OlbN9+/aVqowOHTpgNptZs2YNa9as0WZ36tq1K59++inLli3THhfnUrvzlJqayrJly5g+fTrPPfectr3wtaqIa1gatWvXBuDgwYMu2ZXk5ORS3U1dtWoVJ06cYMaMGW5rpKSmpjJu3Djmzp3LqFGjqFevHna7nT179hTZsIXSv2dq3fft2+d2d3Tfvn3afm+ZzWYGDRrEoEGDsNvtPPjgg3z88cc8++yzRd7drVWrFn5+ftqMcaoGDRrQsGFDfv/9d2bNmuV1gOV8joX9+++/REZGukyrGRMTw4MPPsiDDz7ImTNnaNOmDS+88AIDBgzQuoMEBwe7ZRKcXejPntVqJSsrS3v8888/06NHDz7//HOX49LS0rQJF1QBAQHceuut3HrrrRQUFDB06FBeeOEFnnzySaKioggKCsJmsxV7fuC4rrt27UJRFJfPW2nOLyoqCn9//yLfE71e73Yz5kIp7efD19cXX19fLaPozNO20oqJieHhhx9m+vTpbNiwgWuvvVb7nFWpUqXE96Go77qa0Sm8sGl5u46V5PDhw1f8Wk+iYskYC1Fphg0bhqIoTJ8+3W2feudk6NChGAwGpk+f7nY3RVEUj9ORVoThw4dz8uRJPv30U7d9ubm5ZGdne1WewWCgX79+zJ07l2PHjmnb9+7d69Lnvji+vr60b9+eOXPmcOzYMZeMRW5uLu+88w716tUjJiam2HLURldFrrxdHurds8Lv79tvv+12XHmvYWn06tULo9HIhx9+6LL9vffeK9Xz1W5Qjz76KDfffLPLz7333kv9+vW1hbOGDBmCXq9nxowZbpkZ5+sREBBQqverXbt2VKlShY8++sjlLvtff/3F3r17tS5Y3ij8HdPr9dpd7uLu5JtMJtq1a+c2dTQ4ZsJKTk7WZoIrbPHixcybN89juTExMbRq1YqvvvrK5Zrs2rWLxYsXM3DgQMBxJ1ftRqeqUqUK1apV0+rdtm1b6tWrx+uvv+7SsFep059eyM/e/v372bdvHy1bttS2GQwGt+/DTz/95DZlcOH3xmw206RJExRFwWKxYDAYGDZsGL/88gu7du0q8vzA0SXr1KlT/Pzzz9q2nJycIrtQOTMYDPTt25fff//dZerq06dP8/3339O5c+cL0t3Hk9J+PtRMw9y5c13G4Bw8eJC//vqrXHWYMGEC/v7+vPzyy4AjixEcHMyLL77ocX0W5/ehqL/PtWvXxmAwuGS2wLF45oW0detWt5nshCiOZCxEpenRowd33HEH77zzDgcOHNC6vaxZs4YePXowfvx46tWrx8yZM3nyySc5cuQIQ4YMISgoiMOHD/Pbb78xbtw4HnnkkQqv2x133MGPP/7I/fffz4oVK+jUqRM2m41///2XH3/8kUWLFpXYJayw6dOns3DhQrp06cKDDz6I1WrV5qDfsWNHqcro0qULL7/8MiEhITRv3hxwNJYaNmzIvn37SrXGQtu2bQHHatkjRozAZDIxaNCgC7ZQXUmCg4Pp2rUrr776KhaLherVq7N48WK3O91QMdewJFWrVuWhhx7ijTfeYPDgwfTv35/t27fz119/ERkZWWz2ID8/n19++YU+ffoUuXDd4MGDmTVrFmfOnCEuLo6nn36a559/ni5dujB06FB8fHzYvHkz1apV46WXXgIc79mHH37IzJkziYuLo0qVKh77a5tMJl555RXuuusuunXrxm233aZNNxsbG8vDDz/s9fW45557SElJoWfPntSoUYOjR4/y7rvv0qpVqxLvZN544408/fTTZGRkuDQsb731Vnbu3MkLL7zAtm3buO2227SVtxcuXMiyZcvc1mJw9tprrzFgwAA6duzI2LFjtelEQ0JCtDVbMjMzqVGjBjfffDMtW7YkMDCQpUuXsnnzZt544w3AESR99tlnDBgwgKZNm3LXXXdRvXp1Tp48yYoVKwgODtb6z1fEZ89qtfLtt98Cju4xR44c4aOPPsJut7tMYnHDDTcwY8YM7rrrLq677jp27tzJd9995zIwGqBv375ER0fTqVMnqlatyt69e3nvvfe4/vrrtcHxL7/8MitWrOCaa67h3nvvpUmTJqSkpLB161aWLl1KSkoKAPfeey/vvfceo0ePZsuWLcTExPDNN9+UerHQmTNnsmTJEjp37syDDz6I0Wjk448/Jj8/n1dffbVUZXjjzTffdKubXq/nqaeeKtXnAxxr6yxevJhOnTrxwAMPYLPZeO+992jWrBnx8fFlrltERAR33XUXH3zwAXv37qVx48Z8+OGH3HHHHbRp04YRI0YQFRXFsWPHmD9/Pp06ddJuXKh/nydOnEi/fv0wGAyMGDGCkJAQbrnl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KKBnz55MmzZNSzleaAUFBXz77bdMnjzZJXX53Xff8e233xIdHc2gQYN49tlni43s8vPzyc/P1x5nZmYCYLVa3RbduRKo53QlntuFINer9ORaeUeul3fkennvcrlm2bmO/4PNRj02m5Xibo6qM0CpTCZTieenZiycx1EYDAaqVq1KWFgYqampAERHR5OcnOz19eryyMOc+OVHLJmZmIKCaDdxwgW55uoCglC6876QLpfPVmVQhwZkZmaSkZGhbffx8SlxxrGKatt66+uvv+bWW291q19BQQH/+9//GD16dJnK1SnOn9oSPP/880ybNo3evXvj5+fHokWLuO222/jiiy/K9OLe+vHHH7n99ts5duyYdrfik08+oXbt2lSrVo0dO3bw+OOP06FDh2K7Y02bNo3p06e7bf/ss88qdGS8EEIIIdydzoUX4434GRRe7lB8lwubzaY13AwGQ7EzJTlzvoEIju4dZrOZws0eb8dYqM58+ikZS5YQ3LcvVe65p0xllIZ6Hnq9HpPJ9P/s3Xd4XEe5+PHv2aree7UsF9ly772XxKmQDoEAIQRIuUkIJdyExNzLj3ApyQUCCRAMN5CQQgIpTuK49y4XuUqyiq3e20rbzvn9sd7jXRVbsmVLlt/P8/ix9uwpc2ZXq3l3Zt65bNcRF6+mpoavd/EeePbZZ3nuuefOe2xftW17y2g0Ul5eTlxcnN/22tpa4uLiLnooVK8Ci+HDh/Pkk0/y4IMPArB27VpuuOEG2trarsi4v+XLl2OxWPjggw+63Wf9+vUsXryY/Px8MjMzu9ynY49FaWkpo0ePprCwkOTk5D4vd39zOp189tlnLF26VD6UekDqq+ekrnpH6qt3pL56b6DVmaZplDe2kxge4NeAP1rexC2/20lsiIXt319w3nMcO3aM48ePM2TIECZOnNjja586dYrjx4/jcrlwu90kJSUxffp0v30upb6aSkrY8v3vM/dnPyMsLa1Xx/bGe++9B0BmZibjxo27bNe5kIH23hpISktLycjI4OjRo37tyJ70WPRV27a3DAYDlZWVnYZlHTx4kIULF1JXV3dR5+3VUKiSkhJWrFihP16yZAmKolBWVkZKSspFFaCniouLWbt27QWjNe+Hxvkqv+ML7e22MplMg/qXxWw2D+r762tSXz0nddU7Ul+9I/XVewOlzv6xu4QfvHuYH9+S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\n"},"metadata":{}}]},{"cell_type":"code","source":["# Plotting: Strategy Results - Without Cumulative Deposit\n","\n","OFFSET = 0  # Prevent overlap of closing markers\n","LENGTH = 180  # Change chart time length\n","SIZE = 15  # Size of markers\n","\n","# Use your own DataFrame\n","df_prices = bands_df.copy()\n","df_trades = df_summary.copy()\n","\n","# Convert date formats using .loc\n","df_prices.index = pd.to_datetime(df_prices.index)\n","df_trades.loc[:, 'date'] = pd.to_datetime(df_trades['date'])\n","df_trades.loc[:, 'close_date'] = pd.to_datetime(df_trades['close_date'])\n","\n","# Get the date of the first trade as the start date\n","start_date = df_trades['date'].min()\n","\n","# Find the end date of the trades\n","matching_rows = df_trades[df_trades['date'] == start_date + pd.Timedelta(days=LENGTH)]\n","if not matching_rows.empty:\n","    end_date = matching_rows['close_date'].values[0]\n","else:\n","    # If no matching close_date is found, use start_date + LENGTH as default end date\n","    end_date = start_date + pd.Timedelta(days=LENGTH)\n","\n","# Get price data for the corresponding date range\n","df_prices_30 = df_prices[(df_prices.index >= start_date) & (df_prices.index <= end_date)]\n","\n","# Get trading data within the same date range\n","df_trades_30 = df_trades[(df_trades['date'] >= start_date) & (df_trades['close_date'] <= end_date)]\n","\n","# Set figure size\n","plt.figure(figsize=(8, 5))\n","\n","# Plot actual price line chart\n","plt.plot(df_prices_30.index, df_prices_30['actual_price'], label='Actual Price')\n","\n","# Plot predicted price upper and lower bounds\n","plt.plot(df_prices_30.index, df_prices_30['min_predicted_price'], label='Lower Bound', color='darkgray')\n","plt.plot(df_prices_30.index, df_prices_30['max_predicted_price'], label='Upper Bound', color='darkgray')\n","\n","# Annotate trade points\n","for _, trade in df_trades_30.iterrows():\n","    trade_date = trade['date']\n","    close_date = trade['close_date']\n","    action = trade['action']\n","\n","    # Determine annotation colors: '#4CAF50' light green, '#8B0000' dark red\n","    actual_close_price = df_prices_30[df_prices_30.index == close_date]['actual_price'].values[0]\n","    if action == 'buy':\n","        plt.scatter(trade_date, trade['price'], marker='^', color='green', s=SIZE, zorder=5)\n","        plt.scatter(close_date, actual_close_price + OFFSET, marker='v', color='#8B0000', s=SIZE, zorder=5, alpha=0.9)\n","    elif action == 'sell':\n","        plt.scatter(trade_date, trade['price'], marker='v', color='red', s=SIZE, zorder=5)\n","        plt.scatter(close_date, actual_close_price - OFFSET, marker='^', color='#4CAF50', s=SIZE, zorder=5, alpha=1)\n","\n","# Calculate cumulative returns\n","df_trades_30.loc[:, 'return'] = df_trades_30['return'].astype(float)\n","df_trades_30.set_index('date', inplace=True)\n","cumulative_returns = (1 + df_trades_30['return'].resample('D').sum()).cumprod() - 1\n","\n","# Set title and labels\n","plt.title('Price Trend with Trading Actions (Closed Based on Log Return)')\n","plt.xlabel('Date')\n","plt.ylabel('Price')\n","plt.legend()\n","plt.grid()\n","\n","# Display the figure\n","plt.xticks(rotation=45)\n","plt.tight_layout()\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":507},"id":"IoBC8NzL-VWb","executionInfo":{"status":"ok","timestamp":1727458674931,"user_tz":-480,"elapsed":1847,"user":{"displayName":"sc201jun24c","userId":"02069774851930120564"}},"outputId":"01998226-13b1-4cc1-e303-49ff7cca5931"},"execution_count":234,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 800x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Strategy : Trading Strategy: Close Position After N Days\n","\n","CLOSE_DAYS = 10  # Number of days for automatic position closing\n","\n","# Assume your dataset\n","data = bands_df.copy()\n","\n","# Initialize state\n","position = 0  # Current position: 1 for long, -1 for short, 0 for no position\n","close_date = None  # Used to record the closing date\n","total_return = 0.0  # Used to calculate total return\n","initial_price = None  # Used to record the initial price for calculating return\n","\n","# Used to record trading actions\n","data['action'] = ''\n","data['position'] = 0\n","data['close_date'] = pd.NaT\n","data['return'] = 0.0\n","data['cumulative_return'] = 0.0  # Add cumulative return column\n","\n","# Define a function to get the next working day\n","def get_next_working_day(date, days):\n","    return pd.to_datetime(date) + BDay(days)\n","\n","# Iterate through the dataset\n","for i in data.index:\n","    row = data.loc[i]\n","    action = ''  # Reset action\n","\n","    # Check if there is an open position\n","    if position == 0:  # Currently no position\n","        if row['actual_price'] >= row['max_predicted_price']:  # Sell signal\n","            position = -1\n","            action = 'sell'\n","            close_date = pd.to_datetime(get_next_working_day(row.name, CLOSE_DAYS))  # Ensure close_date is in Timestamp format\n","            initial_price = row['actual_price']  # Record initial price\n","        elif row['actual_price'] <= row['min_predicted_price']:  # Buy signal\n","            position = 1\n","            action = 'buy'\n","            close_date = pd.to_datetime(get_next_working_day(row.name, CLOSE_DAYS))  # Ensure close_date is in Timestamp format\n","            initial_price = row['actual_price']  # Record initial price\n","    else:  # Currently have an open position\n","        if (position == 1 and row['actual_price'] >= row['max_predicted_price']) or \\\n","           (position == -1 and row['actual_price'] <= row['min_predicted_price']):  # Early closing condition triggered\n","            close_date = pd.to_datetime(row.name)  # Update closing date to current index and ensure it's in Timestamp format\n","            action = 'close_and_' + ('sell' if position == 1 else 'buy')  # Execute reverse action\n","\n","            # Calculate return\n","            trade_return = row['actual_price'] - initial_price  # Today: 15, Cost: 13, Position +1 -> profit, -1 -> loss\n","            total_return += trade_return * position\n","            data.at[i, 'return'] = trade_return\n","            data.at[i, 'cumulative_return'] = total_return  # Update cumulative return\n","            position = -1 if position == 1 else 1  # Update position direction\n","            initial_price = row['actual_price']  # Record new initial price\n","        elif pd.to_datetime(row.name) >= close_date:  # Automatically close position after 10 days\n","            action = 'close'  # Automatic closing\n","\n","            # Calculate return\n","            trade_return = row['actual_price'] - initial_price\n","            total_return += trade_return * position\n","            data.at[i, 'return'] = trade_return\n","            data.at[i, 'cumulative_return'] = total_return  # Update cumulative return\n","            position = 0  # Set position to zero after closing\n","            close_date = None  # Clear closing date\n","            initial_price = None  # Clear initial price\n","\n","    # Record action and position\n","    data.at[i, 'action'] = action\n","    data.at[i, 'position'] = position\n","    data.at[i, 'close_date'] = close_date if position != 0 else pd.NaT  # Set closing date\n","\n","# Update closing dates during holding period to NaT\n","data.loc[data['action'] == '', 'close_date'] = pd.NaT\n","\n","# Adjust display settings to show the DataFrame in one line\n","pd.set_option('display.expand_frame_repr', False)  # Disable line wrapping\n","pd.set_option('display.max_columns', None)  # Show all columns\n","\n","# Output results\n","print(data)\n","print(f'Total Return: {total_return}')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zgeri60uLBZ0","executionInfo":{"status":"ok","timestamp":1727458874675,"user_tz":-480,"elapsed":647,"user":{"displayName":"sc201jun24c","userId":"02069774851930120564"}},"outputId":"d0f13b2f-fff1-4960-e4e5-926c0570152a"},"execution_count":235,"outputs":[{"output_type":"stream","name":"stdout","text":["            actual_price  min_predicted_price  max_predicted_price action  position close_date    return  cumulative_return\n","DATE                                                                                                                       \n","2022-08-31     15.076043            18.308071            22.234749    buy         1 2022-09-14  0.000000            0.00000\n","2022-09-01     13.920418            18.544912            22.661152                1        NaT  0.000000            0.00000\n","2022-09-02     13.630764            18.681885            22.924525                1        NaT  0.000000            0.00000\n","2022-09-05     13.630764            18.879949            23.210643                1        NaT  0.000000            0.00000\n","2022-09-06     13.448979            18.654470            22.996859                1        NaT  0.000000            0.00000\n","...                  ...                  ...                  ...    ...       ...        ...       ...                ...\n","2024-08-26    126.449413           108.976599           131.411058                1        NaT  0.000000            0.00000\n","2024-08-27    128.289261           110.282225           133.217838                1        NaT  0.000000            0.00000\n","2024-08-28    125.599492           110.731949           134.114685  close         0        NaT  7.529388          -56.15921\n","2024-08-29    117.580152           103.637951           126.035273                0        NaT  0.000000            0.00000\n","2024-08-30    119.359993           116.508274           142.932885                0        NaT  0.000000            0.00000\n","\n","[523 rows x 8 columns]\n","Total Return: -56.15920999999997\n"]}]},{"cell_type":"code","execution_count":236,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":335,"status":"ok","timestamp":1727458894121,"user":{"displayName":"sc201jun24c","userId":"02069774851930120564"},"user_tz":-480},"id":"gO0Efkts7BEe","outputId":"b48f15b9-566e-4c2a-878a-a77c328a1901"},"outputs":[{"output_type":"stream","name":"stdout","text":["            actual_price  min_predicted_price  max_predicted_price action  position close_date    return  cumulative_return\n","DATE                                                                                                                       \n","2022-08-31     15.076043            18.308071            22.234749    buy         1 2022-09-14  0.000000           0.000000\n","2022-09-01     13.920418            18.544912            22.661152                1        NaT  0.000000           0.000000\n","2022-09-02     13.630764            18.681885            22.924525                1        NaT  0.000000           0.000000\n","2022-09-05     13.630764            18.879949            23.210643                1        NaT  0.000000           0.000000\n","2022-09-06     13.448979            18.654470            22.996859                1        NaT  0.000000           0.000000\n","2022-09-07     13.701678            17.651545            21.583622                1        NaT  0.000000           0.000000\n","2022-09-08     13.977429            16.806899            20.583067                1        NaT  0.000000           0.000000\n","2022-09-09     14.374073            17.843845            21.936178                1        NaT  0.000000           0.000000\n","2022-09-12     14.491969            17.754246            21.713106                1        NaT  0.000000           0.000000\n","2022-09-13     13.119202            18.586061            22.725757                1        NaT  0.000000           0.000000\n","2022-09-14     13.116205            18.831508            23.021484  close         0        NaT -1.959838          -1.959838\n","2022-09-15     12.917383            18.784695            22.991500    buy         1 2022-09-29  0.000000           0.000000\n","2022-09-16     13.186142            18.317220            22.421436                1        NaT  0.000000           0.000000\n","2022-09-19     13.369978            18.714949            22.929581                1        NaT  0.000000           0.000000\n","2022-09-20     13.164161            17.708915            21.698493                1        NaT  0.000000           0.000000\n","2022-09-21     13.249085            16.860666            20.685192                1        NaT  0.000000           0.000000\n","2022-09-22     12.549714            16.974117            20.760989                1        NaT  0.000000           0.000000\n","2022-09-23     12.504756            16.919961            20.691109                1        NaT  0.000000           0.000000\n","2022-09-26     12.217014            17.604423            21.522790                1        NaT  0.000000           0.000000\n","2022-09-27     12.401849            15.937681            19.467509                1        NaT  0.000000           0.000000\n","2022-09-28     12.724557            15.622779            19.050938                1        NaT  0.000000           0.000000\n","2022-09-29     12.209021            15.332701            18.778176  close         0        NaT -0.708362          -2.668200\n","2022-09-30     12.128093            14.906350            18.199190    buy         1 2022-10-14  0.000000           0.000000\n","2022-10-03     12.500759            13.894174            17.042467                1        NaT  0.000000           0.000000\n","2022-10-04     13.155170            13.507265            16.470767                1        NaT  0.000000           0.000000\n","2022-10-05     13.197132            13.518164            16.562761                1        NaT  0.000000           0.000000\n","2022-10-06     13.118204            13.341800            16.312749                1        NaT  0.000000           0.000000\n","2022-10-07     12.065150            13.459859            16.482996                1        NaT  0.000000           0.000000\n","2022-10-10     11.659515            13.811983            16.927113                1        NaT  0.000000           0.000000\n","2022-10-11     11.575591            14.194512            17.432591                1        NaT  0.000000           0.000000\n"]}],"source":["first_30_rows = data.head(30)\n","print(first_30_rows)"]}],"metadata":{"accelerator":"GPU","colab":{"collapsed_sections":["74F3S054L_ca","LNU-izt999ES"],"gpuType":"T4","provenance":[{"file_id":"1qTq0M4_htYOKo4sqjntXB2Q8KTkgBMi0","timestamp":1727292341092}],"toc_visible":true,"authorship_tag":"ABX9TyNHL1y9JFw7BiZofILnU/Gz"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}